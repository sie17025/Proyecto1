

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon May 11 11:05:36 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  008F                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  0105                     	;# 
   203  0107                     	;# 
   204  0108                     	;# 
   205  0109                     	;# 
   206  010C                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0187                     	;# 
   213  0188                     	;# 
   214  0189                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0088                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0097                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009A                     	;# 
   275  009B                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  0105                     	;# 
   281  0107                     	;# 
   282  0108                     	;# 
   283  0109                     	;# 
   284  010C                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  010F                     	;# 
   289  0185                     	;# 
   290  0187                     	;# 
   291  0188                     	;# 
   292  0189                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295  0000                     	;# 
   296  0001                     	;# 
   297  0002                     	;# 
   298  0003                     	;# 
   299  0004                     	;# 
   300  0005                     	;# 
   301  0006                     	;# 
   302  0007                     	;# 
   303  0008                     	;# 
   304  0009                     	;# 
   305  000A                     	;# 
   306  000B                     	;# 
   307  000C                     	;# 
   308  000D                     	;# 
   309  000E                     	;# 
   310  000E                     	;# 
   311  000F                     	;# 
   312  0010                     	;# 
   313  0011                     	;# 
   314  0012                     	;# 
   315  0013                     	;# 
   316  0014                     	;# 
   317  0015                     	;# 
   318  0015                     	;# 
   319  0016                     	;# 
   320  0017                     	;# 
   321  0018                     	;# 
   322  0019                     	;# 
   323  001A                     	;# 
   324  001B                     	;# 
   325  001B                     	;# 
   326  001C                     	;# 
   327  001D                     	;# 
   328  001E                     	;# 
   329  001F                     	;# 
   330  0081                     	;# 
   331  0085                     	;# 
   332  0086                     	;# 
   333  0087                     	;# 
   334  0088                     	;# 
   335  0089                     	;# 
   336  008C                     	;# 
   337  008D                     	;# 
   338  008E                     	;# 
   339  008F                     	;# 
   340  0090                     	;# 
   341  0091                     	;# 
   342  0092                     	;# 
   343  0093                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0096                     	;# 
   349  0097                     	;# 
   350  0098                     	;# 
   351  0099                     	;# 
   352  009A                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  009F                     	;# 
   358  0105                     	;# 
   359  0107                     	;# 
   360  0108                     	;# 
   361  0109                     	;# 
   362  010C                     	;# 
   363  010C                     	;# 
   364  010D                     	;# 
   365  010E                     	;# 
   366  010F                     	;# 
   367  0185                     	;# 
   368  0187                     	;# 
   369  0188                     	;# 
   370  0189                     	;# 
   371  018C                     	;# 
   372  018D                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  000D                     	;# 
   387  000E                     	;# 
   388  000E                     	;# 
   389  000F                     	;# 
   390  0010                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0013                     	;# 
   394  0014                     	;# 
   395  0015                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  001D                     	;# 
   406  001E                     	;# 
   407  001F                     	;# 
   408  0081                     	;# 
   409  0085                     	;# 
   410  0086                     	;# 
   411  0087                     	;# 
   412  0088                     	;# 
   413  0089                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  008F                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0093                     	;# 
   422  0093                     	;# 
   423  0093                     	;# 
   424  0094                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0098                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  009F                     	;# 
   436  0105                     	;# 
   437  0107                     	;# 
   438  0108                     	;# 
   439  0109                     	;# 
   440  010C                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  0185                     	;# 
   446  0187                     	;# 
   447  0188                     	;# 
   448  0189                     	;# 
   449  018C                     	;# 
   450  018D                     	;# 
   451                           
   452                           	psect	strings
   453  0003                     __pstrings:	
   454  0003                     stringtab:	
   455  0003                     __stringtab:	
   456                           
   457                           ;	String table - string pointers are 1 byte each
   458  0003  1BFF               	btfsc	btemp+1,7
   459  0004  280D               	ljmp	stringcode
   460  0005  1383               	bcf	3,7
   461  0006  187F               	btfsc	btemp+1,0
   462  0007  1783               	bsf	3,7
   463  0008  0800               	movf	0,w
   464  0009  0A84               	incf	4,f
   465  000A  1903               	skipnz
   466  000B  0AFF               	incf	btemp+1,f
   467  000C  0008               	return
   468  000D                     stringcode:	
   469  000D                     stringdir:	
   470  000D  3000               	movlw	high stringdir
   471  000E  008A               	movwf	10
   472  000F  0804               	movf	4,w
   473  0010  0A84               	incf	4,f
   474  0011  0782               	addwf	2,f
   475  0012                     __stringbase:	
   476  0012  3400               	retlw	0
   477  0013                     __end_of__stringtab:	
   478  0013                     _dpowers:	
   479  0013  3401               	retlw	1
   480  0014  3400               	retlw	0
   481  0015  340A               	retlw	10
   482  0016  3400               	retlw	0
   483  0017  3464               	retlw	100
   484  0018  3400               	retlw	0
   485  0019  34E8               	retlw	232
   486  001A  3403               	retlw	3
   487  001B  3410               	retlw	16
   488  001C  3427               	retlw	39
   489  001D                     __end_of_dpowers:	
   490  000C                     _PIR1bits	set	12
   491  0018                     _RCSTAbits	set	24
   492  0007                     _PORTC	set	7
   493  0005                     _PORTA	set	5
   494  0013                     _SSPBUF	set	19
   495  0014                     _SSPCON	set	20
   496  0008                     _PORTD	set	8
   497  0006                     _PORTB	set	6
   498  0041                     _RD1	set	65
   499  0040                     _RD0	set	64
   500  008F                     _OSCCONbits	set	143
   501  008C                     _PIE1bits	set	140
   502  009A                     _SPBRGH	set	154
   503  0099                     _SPBRG	set	153
   504  0098                     _TXSTAbits	set	152
   505  009F                     _ADCON1	set	159
   506  0085                     _TRISA	set	133
   507  0094                     _SSPSTATbits	set	148
   508  0094                     _SSPSTAT	set	148
   509  0088                     _TRISD	set	136
   510  0087                     _TRISC	set	135
   511  0086                     _TRISB	set	134
   512  0187                     _BAUDCTLbits	set	391
   513  0189                     _ANSELH	set	393
   514  0188                     _ANSEL	set	392
   515  001D                     STR_1:	
   516  001D  3420               	retlw	32	;' '
   517  001E  3420               	retlw	32	;' '
   518  001F  3420               	retlw	32	;' '
   519  0020  3400               	retlw	0
   520  0021                     STR_9:	
   521  0021  3453               	retlw	83	;'S'
   522  0022  344F               	retlw	79	;'O'
   523  0023  344C               	retlw	76	;'L'
   524  0024  3400               	retlw	0
   525  0025                     STR_7:	
   526  0025  3454               	retlw	84	;'T'
   527  0026  3445               	retlw	69	;'E'
   528  0027  344D               	retlw	77	;'M'
   529  0028  3400               	retlw	0
   530  0029                     STR_8:	
   531  0029  3448               	retlw	72	;'H'
   532  002A  3455               	retlw	85	;'U'
   533  002B  344D               	retlw	77	;'M'
   534  002C  3400               	retlw	0
   535  002D                     STR_10:	
   536  002D  3425               	retlw	37	;'%'
   537  002E  3464               	retlw	100	;'d'
   538  002F  3400               	retlw	0
   539  0030                     STR_6:	
   540  0030  3450               	retlw	80	;'P'
   541  0031  3452               	retlw	82	;'R'
   542  0032  3400               	retlw	0
   543  001D                     
   544                           ; #config settings
   545  0000                     
   546                           	psect	cinit
   547  07EF                     start_initialization:	
   548  07EF                     __initialization:	
   549                           
   550                           ; Clear objects allocated to BANK0
   551  07EF  1283               	bcf	3,5	;RP0=0, select bank0
   552  07F0  1303               	bcf	3,6	;RP1=0, select bank0
   553  07F1  01B7               	clrf	__pbssBANK0& (0+127)
   554  07F2  01B8               	clrf	(__pbssBANK0+1)& (0+127)
   555  07F3  01B9               	clrf	(__pbssBANK0+2)& (0+127)
   556  07F4  01BA               	clrf	(__pbssBANK0+3)& (0+127)
   557  07F5  01BB               	clrf	(__pbssBANK0+4)& (0+127)
   558  07F6  01BC               	clrf	(__pbssBANK0+5)& (0+127)
   559  07F7  01BD               	clrf	(__pbssBANK0+6)& (0+127)
   560  07F8  01BE               	clrf	(__pbssBANK0+7)& (0+127)
   561  07F9  01BF               	clrf	(__pbssBANK0+8)& (0+127)
   562  07FA  01C0               	clrf	(__pbssBANK0+9)& (0+127)
   563  07FB  01C1               	clrf	(__pbssBANK0+10)& (0+127)
   564  07FC                     end_of_initialization:	
   565                           ;End of C runtime variable initialization code
   566                           
   567  07FC                     __end_of__initialization:	
   568  07FC  0183               	clrf	3
   569  07FD  120A  118A  2E8B   	ljmp	_main	;jump to C main() function
   570                           
   571                           	psect	bssBANK0
   572  0037                     __pbssBANK0:	
   573  0037                     _caudal:	
   574  0037                     	ds	2
   575  0039                     _hum:	
   576  0039                     	ds	2
   577  003B                     _luz:	
   578  003B                     	ds	2
   579  003D                     _temp:	
   580  003D                     	ds	2
   581  003F                     _prox:	
   582  003F                     	ds	2
   583  0041                     _cursor:	
   584  0041                     	ds	1
   585                           
   586                           	psect	cstackCOMMON
   587  0070                     __pcstackCOMMON:	
   588  0070                     ?_setup:	
   589  0070                     ?_spiWrite:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ??_spiWrite:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_spiRead:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ??_spiRead:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_writeIntLCD:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_spiInit:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_initLCD:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_clcLCD:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_cmdLCD:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ??_cmdLCD:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_writeCharLCD:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ??_writeCharLCD:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_main:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_spiReceiveWait:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ??_spiReceiveWait:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?___lwdiv:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     spiInit@sDataSample:	
   638                           ; 2 bytes @ 0x0
   639                           
   640  0070                     spiWrite@dat:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ___lwdiv@divisor:	
   644                           ; 1 bytes @ 0x0
   645                           
   646                           
   647                           ; 2 bytes @ 0x0
   648  0070                     	ds	1
   649  0071                     spiInit@sClockIdle:	
   650  0071                     writeCharLCD@character:	
   651                           ; 1 bytes @ 0x1
   652                           
   653                           
   654                           ; 1 bytes @ 0x1
   655  0071                     	ds	1
   656  0072                     ?_writeStrLCD:	
   657  0072                     spiInit@sTransmitEdge:	
   658                           ; 1 bytes @ 0x2
   659                           
   660  0072                     cmdLCD@cmd:	
   661                           ; 1 bytes @ 0x2
   662                           
   663  0072                     writeStrLCD@string:	
   664                           ; 1 bytes @ 0x2
   665                           
   666  0072                     ___lwdiv@dividend:	
   667                           ; 2 bytes @ 0x2
   668                           
   669                           
   670                           ; 2 bytes @ 0x2
   671  0072                     	ds	1
   672  0073                     ?_setCursorLCD:	
   673  0073                     ??_spiInit:	
   674                           ; 1 bytes @ 0x3
   675                           
   676  0073                     ??_initLCD:	
   677                           ; 1 bytes @ 0x3
   678                           
   679  0073                     ??_clcLCD:	
   680                           ; 1 bytes @ 0x3
   681                           
   682  0073                     spiInit@sType:	
   683                           ; 1 bytes @ 0x3
   684                           
   685  0073                     setCursorLCD@x:	
   686                           ; 1 bytes @ 0x3
   687                           
   688                           
   689                           ; 1 bytes @ 0x3
   690  0073                     	ds	1
   691  0074                     ??_setCursorLCD:	
   692  0074                     ??_writeStrLCD:	
   693                           ; 1 bytes @ 0x4
   694                           
   695  0074                     ??___lwdiv:	
   696                           ; 1 bytes @ 0x4
   697                           
   698                           
   699                           ; 1 bytes @ 0x4
   700  0074                     	ds	1
   701  0075                     setCursorLCD@y:	
   702  0075                     ___lwdiv@quotient:	
   703                           ; 1 bytes @ 0x5
   704                           
   705                           
   706                           ; 2 bytes @ 0x5
   707  0075                     	ds	2
   708  0077                     ___lwdiv@counter:	
   709  0077                     writeStrLCD@cont:	
   710                           ; 1 bytes @ 0x7
   711                           
   712                           
   713                           ; 2 bytes @ 0x7
   714  0077                     	ds	1
   715  0078                     ?___lwmod:	
   716  0078                     ___lwmod@divisor:	
   717                           ; 2 bytes @ 0x8
   718                           
   719                           
   720                           ; 2 bytes @ 0x8
   721  0078                     	ds	1
   722  0079                     ??_setup:	
   723                           
   724                           ; 1 bytes @ 0x9
   725  0079                     	ds	1
   726  007A                     ___lwmod@dividend:	
   727                           
   728                           ; 2 bytes @ 0xA
   729  007A                     	ds	2
   730  007C                     ??___lwmod:	
   731                           
   732                           ; 1 bytes @ 0xC
   733  007C                     	ds	1
   734  007D                     ___lwmod@counter:	
   735                           
   736                           ; 1 bytes @ 0xD
   737  007D                     	ds	1
   738                           
   739                           	psect	cstackBANK0
   740  0020                     __pcstackBANK0:	
   741  0020                     ?_sprintf:	
   742  0020                     sprintf@f:	
   743                           ; 2 bytes @ 0x0
   744                           
   745                           
   746                           ; 1 bytes @ 0x0
   747  0020                     	ds	3
   748  0023                     ??_sprintf:	
   749                           
   750                           ; 1 bytes @ 0x3
   751  0023                     	ds	3
   752  0026                     sprintf@ap:	
   753                           
   754                           ; 1 bytes @ 0x6
   755  0026                     	ds	1
   756  0027                     sprintf@flag:	
   757                           
   758                           ; 1 bytes @ 0x7
   759  0027                     	ds	1
   760  0028                     sprintf@prec:	
   761                           
   762                           ; 1 bytes @ 0x8
   763  0028                     	ds	1
   764  0029                     sprintf@val:	
   765                           
   766                           ; 2 bytes @ 0x9
   767  0029                     	ds	2
   768  002B                     sprintf@sp:	
   769                           
   770                           ; 1 bytes @ 0xB
   771  002B                     	ds	1
   772  002C                     sprintf@c:	
   773                           
   774                           ; 1 bytes @ 0xC
   775  002C                     	ds	1
   776  002D                     ??_writeIntLCD:	
   777                           
   778                           ; 1 bytes @ 0xD
   779  002D                     	ds	3
   780  0030                     writeIntLCD@buffer:	
   781                           
   782                           ; 4 bytes @ 0x10
   783  0030                     	ds	4
   784  0034                     writeIntLCD@numero:	
   785                           
   786                           ; 1 bytes @ 0x14
   787  0034                     	ds	1
   788  0035                     ??_main:	
   789                           
   790                           ; 1 bytes @ 0x15
   791  0035                     	ds	2
   792                           
   793                           	psect	maintext
   794  068B                     __pmaintext:	
   795 ;;
   796 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   797 ;;
   798 ;; *************** function _main *****************
   799 ;; Defined at:
   800 ;;		line 47 in file "main_s.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;		None
   803 ;; Auto vars:     Size  Location     Type
   804 ;;		None
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : B00/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   814 ;;      Params:         0       0       0       0       0
   815 ;;      Locals:         0       0       0       0       0
   816 ;;      Temps:          0       2       0       0       0
   817 ;;      Totals:         0       2       0       0       0
   818 ;;Total ram usage:        2 bytes
   819 ;; Hardware stack levels required when called:    3
   820 ;; This function calls:
   821 ;;		_setCursorLCD
   822 ;;		_setup
   823 ;;		_spiRead
   824 ;;		_spiWrite
   825 ;;		_writeIntLCD
   826 ;;		_writeStrLCD
   827 ;; This function is called by:
   828 ;;		Startup code after reset
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           
   833                           ;psect for function _main
   834  068B                     _main:	
   835  068B                     l1402:	
   836                           ;incstack = 0
   837                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   838                           
   839                           
   840                           ;main_s.c: 48:     setup();
   841  068B  120A  118A  2537  120A  118A  	fcall	_setup
   842  0690                     l1404:	
   843                           
   844                           ;main_s.c: 54:        spiWrite(0);
   845  0690  3000               	movlw	0
   846  0691  120A  118A  23AE  120A  118A  	fcall	_spiWrite
   847  0696                     l1406:	
   848                           
   849                           ;main_s.c: 55:        prox = spiRead();
   850  0696  120A  118A  23C2  120A  118A  	fcall	_spiRead
   851  069B  1283               	bcf	3,5	;RP0=0, select bank0
   852  069C  1303               	bcf	3,6	;RP1=0, select bank0
   853  069D  00B5               	movwf	??_main
   854  069E  01B6               	clrf	??_main+1
   855  069F  0835               	movf	??_main,w
   856  06A0  00BF               	movwf	_prox
   857  06A1  0836               	movf	??_main+1,w
   858  06A2  00C0               	movwf	_prox+1
   859  06A3                     l1408:	
   860                           
   861                           ;main_s.c: 56:        _delay((unsigned long)((5)*(4000000/4000.0)));
   862  06A3  3007               	movlw	7
   863  06A4  1283               	bcf	3,5	;RP0=0, select bank0
   864  06A5  1303               	bcf	3,6	;RP1=0, select bank0
   865  06A6  00B6               	movwf	??_main+1
   866  06A7  307C               	movlw	124
   867  06A8  00B5               	movwf	??_main
   868  06A9                     u557:	
   869  06A9  0BB5               	decfsz	??_main,f
   870  06AA  2EA9               	goto	u557
   871  06AB  0BB6               	decfsz	??_main+1,f
   872  06AC  2EA9               	goto	u557
   873  06AD  0000               	nop
   874  06AE                     l1410:	
   875                           
   876                           ;main_s.c: 57:        spiWrite(1);
   877  06AE  3001               	movlw	1
   878  06AF  120A  118A  23AE  120A  118A  	fcall	_spiWrite
   879  06B4                     l1412:	
   880                           
   881                           ;main_s.c: 58:        temp = spiRead();
   882  06B4  120A  118A  23C2  120A  118A  	fcall	_spiRead
   883  06B9  1283               	bcf	3,5	;RP0=0, select bank0
   884  06BA  1303               	bcf	3,6	;RP1=0, select bank0
   885  06BB  00B5               	movwf	??_main
   886  06BC  01B6               	clrf	??_main+1
   887  06BD  0835               	movf	??_main,w
   888  06BE  00BD               	movwf	_temp
   889  06BF  0836               	movf	??_main+1,w
   890  06C0  00BE               	movwf	_temp+1
   891  06C1                     l1414:	
   892                           
   893                           ;main_s.c: 59:        _delay((unsigned long)((5)*(4000000/4000.0)));
   894  06C1  3007               	movlw	7
   895  06C2  1283               	bcf	3,5	;RP0=0, select bank0
   896  06C3  1303               	bcf	3,6	;RP1=0, select bank0
   897  06C4  00B6               	movwf	??_main+1
   898  06C5  307C               	movlw	124
   899  06C6  00B5               	movwf	??_main
   900  06C7                     u567:	
   901  06C7  0BB5               	decfsz	??_main,f
   902  06C8  2EC7               	goto	u567
   903  06C9  0BB6               	decfsz	??_main+1,f
   904  06CA  2EC7               	goto	u567
   905  06CB  0000               	nop
   906  06CC                     l1416:	
   907                           
   908                           ;main_s.c: 60:        spiWrite(2);
   909  06CC  3002               	movlw	2
   910  06CD  120A  118A  23AE  120A  118A  	fcall	_spiWrite
   911  06D2                     l1418:	
   912                           
   913                           ;main_s.c: 61:        caudal = spiRead();
   914  06D2  120A  118A  23C2  120A  118A  	fcall	_spiRead
   915  06D7  1283               	bcf	3,5	;RP0=0, select bank0
   916  06D8  1303               	bcf	3,6	;RP1=0, select bank0
   917  06D9  00B5               	movwf	??_main
   918  06DA  01B6               	clrf	??_main+1
   919  06DB  0835               	movf	??_main,w
   920  06DC  00B7               	movwf	_caudal
   921  06DD  0836               	movf	??_main+1,w
   922  06DE  00B8               	movwf	_caudal+1
   923  06DF                     l1420:	
   924                           
   925                           ;main_s.c: 62:        _delay((unsigned long)((5)*(4000000/4000.0)));
   926  06DF  3007               	movlw	7
   927  06E0  1283               	bcf	3,5	;RP0=0, select bank0
   928  06E1  1303               	bcf	3,6	;RP1=0, select bank0
   929  06E2  00B6               	movwf	??_main+1
   930  06E3  307C               	movlw	124
   931  06E4  00B5               	movwf	??_main
   932  06E5                     u577:	
   933  06E5  0BB5               	decfsz	??_main,f
   934  06E6  2EE5               	goto	u577
   935  06E7  0BB6               	decfsz	??_main+1,f
   936  06E8  2EE5               	goto	u577
   937  06E9  0000               	nop
   938  06EA                     l1422:	
   939                           
   940                           ;main_s.c: 63:        spiWrite(3);
   941  06EA  3003               	movlw	3
   942  06EB  120A  118A  23AE  120A  118A  	fcall	_spiWrite
   943  06F0                     l1424:	
   944                           
   945                           ;main_s.c: 64:        luz = spiRead();
   946  06F0  120A  118A  23C2  120A  118A  	fcall	_spiRead
   947  06F5  1283               	bcf	3,5	;RP0=0, select bank0
   948  06F6  1303               	bcf	3,6	;RP1=0, select bank0
   949  06F7  00B5               	movwf	??_main
   950  06F8  01B6               	clrf	??_main+1
   951  06F9  0835               	movf	??_main,w
   952  06FA  00BB               	movwf	_luz
   953  06FB  0836               	movf	??_main+1,w
   954  06FC  00BC               	movwf	_luz+1
   955  06FD                     l1426:	
   956                           
   957                           ;main_s.c: 65:        _delay((unsigned long)((5)*(4000000/4000.0)));
   958  06FD  3007               	movlw	7
   959  06FE  1283               	bcf	3,5	;RP0=0, select bank0
   960  06FF  1303               	bcf	3,6	;RP1=0, select bank0
   961  0700  00B6               	movwf	??_main+1
   962  0701  307C               	movlw	124
   963  0702  00B5               	movwf	??_main
   964  0703                     u587:	
   965  0703  0BB5               	decfsz	??_main,f
   966  0704  2F03               	goto	u587
   967  0705  0BB6               	decfsz	??_main+1,f
   968  0706  2F03               	goto	u587
   969  0707  0000               	nop
   970  0708                     l1428:	
   971                           
   972                           ;main_s.c: 66:        spiWrite(4);
   973  0708  3004               	movlw	4
   974  0709  120A  118A  23AE  120A  118A  	fcall	_spiWrite
   975  070E                     l1430:	
   976                           
   977                           ;main_s.c: 67:        hum = spiRead();
   978  070E  120A  118A  23C2  120A  118A  	fcall	_spiRead
   979  0713  1283               	bcf	3,5	;RP0=0, select bank0
   980  0714  1303               	bcf	3,6	;RP1=0, select bank0
   981  0715  00B5               	movwf	??_main
   982  0716  01B6               	clrf	??_main+1
   983  0717  0835               	movf	??_main,w
   984  0718  00B9               	movwf	_hum
   985  0719  0836               	movf	??_main+1,w
   986  071A  00BA               	movwf	_hum+1
   987  071B                     l1432:	
   988                           
   989                           ;main_s.c: 68:        _delay((unsigned long)((5)*(4000000/4000.0)));
   990  071B  3007               	movlw	7
   991  071C  1283               	bcf	3,5	;RP0=0, select bank0
   992  071D  1303               	bcf	3,6	;RP1=0, select bank0
   993  071E  00B6               	movwf	??_main+1
   994  071F  307C               	movlw	124
   995  0720  00B5               	movwf	??_main
   996  0721                     u597:	
   997  0721  0BB5               	decfsz	??_main,f
   998  0722  2F21               	goto	u597
   999  0723  0BB6               	decfsz	??_main+1,f
  1000  0724  2F21               	goto	u597
  1001  0725  0000               	nop
  1002  0726                     l1434:	
  1003                           
  1004                           ;main_s.c: 71:         setCursorLCD(2, 1);
  1005  0726  01F3               	clrf	setCursorLCD@x
  1006  0727  0AF3               	incf	setCursorLCD@x,f
  1007  0728  3002               	movlw	2
  1008  0729  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1009  072E                     l1436:	
  1010                           
  1011                           ;main_s.c: 72:         writeStrLCD("   ");
  1012  072E  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1013  072F  00F2               	movwf	writeStrLCD@string
  1014  0730  3080               	movlw	128
  1015  0731  00F3               	movwf	writeStrLCD@string+1
  1016  0732  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  1017  0737                     l1438:	
  1018                           
  1019                           ;main_s.c: 73:         setCursorLCD(2, 1);
  1020  0737  01F3               	clrf	setCursorLCD@x
  1021  0738  0AF3               	incf	setCursorLCD@x,f
  1022  0739  3002               	movlw	2
  1023  073A  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1024  073F                     l1440:	
  1025                           
  1026                           ;main_s.c: 74:         writeIntLCD(caudal);
  1027  073F  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0740  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0741  0837               	movf	_caudal,w
  1030  0742  120A  118A  241F  120A  118A  	fcall	_writeIntLCD
  1031  0747                     l1442:	
  1032                           
  1033                           ;main_s.c: 75:         setCursorLCD(2, 9);
  1034  0747  3009               	movlw	9
  1035  0748  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0749  1303               	bcf	3,6	;RP1=0, select bank0
  1037  074A  00B5               	movwf	??_main
  1038  074B  0835               	movf	??_main,w
  1039  074C  00F3               	movwf	setCursorLCD@x
  1040  074D  3002               	movlw	2
  1041  074E  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1042  0753                     l1444:	
  1043                           
  1044                           ;main_s.c: 76:         writeStrLCD("   ");
  1045  0753  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1046  0754  00F2               	movwf	writeStrLCD@string
  1047  0755  3080               	movlw	128
  1048  0756  00F3               	movwf	writeStrLCD@string+1
  1049  0757  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  1050  075C                     l1446:	
  1051                           
  1052                           ;main_s.c: 77:         setCursorLCD(2, 9);
  1053  075C  3009               	movlw	9
  1054  075D  1283               	bcf	3,5	;RP0=0, select bank0
  1055  075E  1303               	bcf	3,6	;RP1=0, select bank0
  1056  075F  00B5               	movwf	??_main
  1057  0760  0835               	movf	??_main,w
  1058  0761  00F3               	movwf	setCursorLCD@x
  1059  0762  3002               	movlw	2
  1060  0763  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1061  0768                     l1448:	
  1062                           
  1063                           ;main_s.c: 78:         writeIntLCD(temp);
  1064  0768  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0769  1303               	bcf	3,6	;RP1=0, select bank0
  1066  076A  083D               	movf	_temp,w
  1067  076B  120A  118A  241F  120A  118A  	fcall	_writeIntLCD
  1068  0770                     l1450:	
  1069                           
  1070                           ;main_s.c: 80:         setCursorLCD(2, 14);
  1071  0770  300E               	movlw	14
  1072  0771  1283               	bcf	3,5	;RP0=0, select bank0
  1073  0772  1303               	bcf	3,6	;RP1=0, select bank0
  1074  0773  00B5               	movwf	??_main
  1075  0774  0835               	movf	??_main,w
  1076  0775  00F3               	movwf	setCursorLCD@x
  1077  0776  3002               	movlw	2
  1078  0777  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1079  077C                     l1452:	
  1080                           
  1081                           ;main_s.c: 81:         writeStrLCD("   ");
  1082  077C  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1083  077D  00F2               	movwf	writeStrLCD@string
  1084  077E  3080               	movlw	128
  1085  077F  00F3               	movwf	writeStrLCD@string+1
  1086  0780  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  1087  0785                     l1454:	
  1088                           
  1089                           ;main_s.c: 82:         setCursorLCD(2, 14);
  1090  0785  300E               	movlw	14
  1091  0786  1283               	bcf	3,5	;RP0=0, select bank0
  1092  0787  1303               	bcf	3,6	;RP1=0, select bank0
  1093  0788  00B5               	movwf	??_main
  1094  0789  0835               	movf	??_main,w
  1095  078A  00F3               	movwf	setCursorLCD@x
  1096  078B  3002               	movlw	2
  1097  078C  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1098  0791                     l1456:	
  1099                           
  1100                           ;main_s.c: 83:         writeIntLCD(prox);
  1101  0791  1283               	bcf	3,5	;RP0=0, select bank0
  1102  0792  1303               	bcf	3,6	;RP1=0, select bank0
  1103  0793  083F               	movf	_prox,w
  1104  0794  120A  118A  241F  120A  118A  	fcall	_writeIntLCD
  1105  0799                     l1458:	
  1106                           
  1107                           ;main_s.c: 84:         setCursorLCD(2, 4);
  1108  0799  3004               	movlw	4
  1109  079A  1283               	bcf	3,5	;RP0=0, select bank0
  1110  079B  1303               	bcf	3,6	;RP1=0, select bank0
  1111  079C  00B5               	movwf	??_main
  1112  079D  0835               	movf	??_main,w
  1113  079E  00F3               	movwf	setCursorLCD@x
  1114  079F  3002               	movlw	2
  1115  07A0  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1116  07A5                     l1460:	
  1117                           
  1118                           ;main_s.c: 85:         writeStrLCD("   ");
  1119  07A5  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1120  07A6  00F2               	movwf	writeStrLCD@string
  1121  07A7  3080               	movlw	128
  1122  07A8  00F3               	movwf	writeStrLCD@string+1
  1123  07A9  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  1124  07AE                     l1462:	
  1125                           
  1126                           ;main_s.c: 86:         setCursorLCD(2, 4);
  1127  07AE  3004               	movlw	4
  1128  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  1129  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  1130  07B1  00B5               	movwf	??_main
  1131  07B2  0835               	movf	??_main,w
  1132  07B3  00F3               	movwf	setCursorLCD@x
  1133  07B4  3002               	movlw	2
  1134  07B5  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1135  07BA                     l1464:	
  1136                           
  1137                           ;main_s.c: 87:         writeIntLCD(luz);
  1138  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  1139  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  1140  07BC  083B               	movf	_luz,w
  1141  07BD  120A  118A  241F  120A  118A  	fcall	_writeIntLCD
  1142  07C2                     l1466:	
  1143                           
  1144                           ;main_s.c: 88:         setCursorLCD(1, 4);
  1145  07C2  3004               	movlw	4
  1146  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  1147  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  1148  07C5  00B5               	movwf	??_main
  1149  07C6  0835               	movf	??_main,w
  1150  07C7  00F3               	movwf	setCursorLCD@x
  1151  07C8  3001               	movlw	1
  1152  07C9  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1153  07CE                     l1468:	
  1154                           
  1155                           ;main_s.c: 89:         writeStrLCD("   ");
  1156  07CE  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1157  07CF  00F2               	movwf	writeStrLCD@string
  1158  07D0  3080               	movlw	128
  1159  07D1  00F3               	movwf	writeStrLCD@string+1
  1160  07D2  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  1161  07D7                     l1470:	
  1162                           
  1163                           ;main_s.c: 90:         setCursorLCD(1, 4);
  1164  07D7  3004               	movlw	4
  1165  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  1166  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  1167  07DA  00B5               	movwf	??_main
  1168  07DB  0835               	movf	??_main,w
  1169  07DC  00F3               	movwf	setCursorLCD@x
  1170  07DD  3001               	movlw	1
  1171  07DE  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  1172  07E3                     l1472:	
  1173                           
  1174                           ;main_s.c: 91:         writeIntLCD(hum);
  1175  07E3  1283               	bcf	3,5	;RP0=0, select bank0
  1176  07E4  1303               	bcf	3,6	;RP1=0, select bank0
  1177  07E5  0839               	movf	_hum,w
  1178  07E6  120A  118A  241F  120A  118A  	fcall	_writeIntLCD
  1179  07EB  2E90               	goto	l1404
  1180  07EC  120A  118A  2800   	ljmp	start
  1181  07EF                     __end_of_main:	
  1182                           
  1183                           	psect	text1
  1184  041F                     __ptext1:	
  1185 ;; *************** function _writeIntLCD *****************
  1186 ;; Defined at:
  1187 ;;		line 66 in file "LCD.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  numero          1    wreg     unsigned char 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  numero          1   20[BANK0 ] unsigned char 
  1192 ;;  buffer          4   16[BANK0 ] unsigned char [4]
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1202 ;;      Params:         0       0       0       0       0
  1203 ;;      Locals:         0       5       0       0       0
  1204 ;;      Temps:          0       3       0       0       0
  1205 ;;      Totals:         0       8       0       0       0
  1206 ;;Total ram usage:        8 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    2
  1209 ;; This function calls:
  1210 ;;		_sprintf
  1211 ;;		_writeStrLCD
  1212 ;; This function is called by:
  1213 ;;		_main
  1214 ;;		_writeFloat
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           
  1219                           ;psect for function _writeIntLCD
  1220  041F                     _writeIntLCD:	
  1221                           
  1222                           ;incstack = 0
  1223                           ; Regs used in _writeIntLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1224                           ;writeIntLCD@numero stored from wreg
  1225  041F  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0420  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0421  00B4               	movwf	writeIntLCD@numero
  1228  0422                     l1400:	
  1229                           
  1230                           ;LCD.c: 67:     char buffer [4];;LCD.c: 68:     sprintf (buffer, "%d", numero);
  1231  0422  301B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1232  0423  00AD               	movwf	??_writeIntLCD
  1233  0424  082D               	movf	??_writeIntLCD,w
  1234  0425  00A0               	movwf	sprintf@f
  1235  0426  0834               	movf	writeIntLCD@numero,w
  1236  0427  00AE               	movwf	??_writeIntLCD+1
  1237  0428  01AF               	clrf	??_writeIntLCD+2
  1238  0429  082E               	movf	??_writeIntLCD+1,w
  1239  042A  00A1               	movwf	?_sprintf+1
  1240  042B  082F               	movf	??_writeIntLCD+2,w
  1241  042C  00A2               	movwf	?_sprintf+2
  1242  042D  3030               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1243  042E  120A  118A  25A3  120A  118A  	fcall	_sprintf
  1244                           
  1245                           ;LCD.c: 69:     writeStrLCD(buffer);
  1246  0433  3030               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1247  0434  00F2               	movwf	writeStrLCD@string
  1248  0435  3000               	movlw	0
  1249  0436  00F3               	movwf	writeStrLCD@string+1
  1250  0437  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  1251  043C                     l190:	
  1252  043C  0008               	return
  1253  043D                     __end_of_writeIntLCD:	
  1254                           
  1255                           	psect	text2
  1256  05A3                     __ptext2:	
  1257 ;; *************** function _sprintf *****************
  1258 ;; Defined at:
  1259 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;  sp              1    wreg     PTR unsigned char 
  1262 ;;		 -> writeIntLCD@buffer(4), 
  1263 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1264 ;;		 -> STR_10(3), 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1267 ;;		 -> writeIntLCD@buffer(4), 
  1268 ;;  tmpval          4    0        struct .
  1269 ;;  val             2    9[BANK0 ] unsigned int 
  1270 ;;  cp              2    0        PTR const unsigned char 
  1271 ;;  len             2    0        unsigned int 
  1272 ;;  c               1   12[BANK0 ] unsigned char 
  1273 ;;  prec            1    8[BANK0 ] char 
  1274 ;;  flag            1    7[BANK0 ] unsigned char 
  1275 ;;  ap              1    6[BANK0 ] PTR void [1]
  1276 ;;		 -> ?_sprintf(2), 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  2    0[BANK0 ] int 
  1279 ;; Registers used:
  1280 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1286 ;;      Params:         0       3       0       0       0
  1287 ;;      Locals:         0       7       0       0       0
  1288 ;;      Temps:          0       3       0       0       0
  1289 ;;      Totals:         0      13       0       0       0
  1290 ;;Total ram usage:       13 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    1
  1293 ;; This function calls:
  1294 ;;		___lwdiv
  1295 ;;		___lwmod
  1296 ;; This function is called by:
  1297 ;;		_writeIntLCD
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           
  1302                           ;psect for function _sprintf
  1303  05A3                     _sprintf:	
  1304                           
  1305                           ;incstack = 0
  1306                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1307                           ;sprintf@sp stored from wreg
  1308  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  1309  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  1310  05A5  00AB               	movwf	sprintf@sp
  1311  05A6                     l1298:	
  1312                           
  1313                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 505: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources
      +                          \c90\common\doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\
      +                          common\doprnt.c: 507:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\source
      +                          s\c90\common\doprnt.c: 512:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c90\common\doprnt.c: 521:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .10\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
  1314  05A6  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1315  05A7  00A3               	movwf	??_sprintf
  1316  05A8  0823               	movf	??_sprintf,w
  1317  05A9  00A6               	movwf	sprintf@ap
  1318                           
  1319                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1320  05AA  2E74               	goto	l1350
  1321  05AB                     l1300:	
  1322                           
  1323                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 555:   if(c
      +                           != '%')
  1324  05AB  3025               	movlw	37
  1325  05AC  062C               	xorwf	sprintf@c,w
  1326  05AD  1903               	btfsc	3,2
  1327  05AE  2DB0               	goto	u471
  1328  05AF  2DB1               	goto	u470
  1329  05B0                     u471:	
  1330  05B0  2DBD               	goto	l1306
  1331  05B1                     u470:	
  1332  05B1                     l1302:	
  1333                           
  1334                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 557:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 558:    ((*sp+
      +                          + = (c)));
  1335  05B1  082C               	movf	sprintf@c,w
  1336  05B2  00A3               	movwf	??_sprintf
  1337  05B3  082B               	movf	sprintf@sp,w
  1338  05B4  0084               	movwf	4
  1339  05B5  0823               	movf	??_sprintf,w
  1340  05B6  1383               	bcf	3,7	;select IRP bank0
  1341  05B7  0080               	movwf	0
  1342  05B8                     l1304:	
  1343  05B8  3001               	movlw	1
  1344  05B9  00A3               	movwf	??_sprintf
  1345  05BA  0823               	movf	??_sprintf,w
  1346  05BB  07AB               	addwf	sprintf@sp,f
  1347                           
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 559:    con
      +                          tinue;
  1349  05BC  2E74               	goto	l1350
  1350  05BD                     l1306:	
  1351                           
  1352                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 565:   flag
      +                           = 0;
  1353  05BD  01A7               	clrf	sprintf@flag
  1354  05BE                     l1310:	
  1355                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 661:   swit
      +                          ch(c = *f++) {
  1356                           
  1357  05BE  3001               	movlw	1
  1358  05BF  07A0               	addwf	sprintf@f,f
  1359  05C0  30FF               	movlw	-1
  1360  05C1  0720               	addwf	sprintf@f,w
  1361  05C2  0084               	movwf	4
  1362  05C3  120A  118A  200D  120A  118A  	fcall	stringdir
  1363  05C8  00AC               	movwf	sprintf@c
  1364  05C9  00A3               	movwf	??_sprintf
  1365  05CA  01A4               	clrf	??_sprintf+1
  1366                           
  1367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1368                           ; Switch size 1, requested type "simple"
  1369                           ; Number of cases is 1, Range of values is 0 to 0
  1370                           ; switch strategies available:
  1371                           ; Name         Instructions Cycles
  1372                           ; simple_byte            4     3 (average)
  1373                           ; direct_byte           11     8 (fixed)
  1374                           ; jumptable            260     6 (fixed)
  1375                           ;	Chosen strategy is simple_byte
  1376  05CB  0824               	movf	??_sprintf+1,w
  1377  05CC  3A00               	xorlw	0	; case 0
  1378  05CD  1903               	skipnz
  1379  05CE  2DD0               	goto	l1550
  1380  05CF  2E74               	goto	l1350
  1381  05D0                     l1550:	
  1382                           
  1383                           ; Switch size 1, requested type "simple"
  1384                           ; Number of cases is 3, Range of values is 0 to 105
  1385                           ; switch strategies available:
  1386                           ; Name         Instructions Cycles
  1387                           ; simple_byte           10     6 (average)
  1388                           ; jumptable            260     6 (fixed)
  1389                           ;	Chosen strategy is simple_byte
  1390  05D0  0823               	movf	??_sprintf,w
  1391  05D1  3A00               	xorlw	0	; case 0
  1392  05D2  1903               	skipnz
  1393  05D3  2E86               	goto	l1352
  1394  05D4  3A64               	xorlw	100	; case 100
  1395  05D5  1903               	skipnz
  1396  05D6  2DDB               	goto	l1312
  1397  05D7  3A0D               	xorlw	13	; case 105
  1398  05D8  1903               	skipnz
  1399  05D9  2DDB               	goto	l1312
  1400  05DA  2E74               	goto	l1350
  1401  05DB                     l1312:	
  1402                           
  1403                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1279:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1285:     val
      +                           = (unsigned int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1404  05DB  0826               	movf	sprintf@ap,w
  1405  05DC  0084               	movwf	4
  1406  05DD  1383               	bcf	3,7	;select IRP bank0
  1407  05DE  0800               	movf	0,w
  1408  05DF  00A9               	movwf	sprintf@val
  1409  05E0  0A84               	incf	4,f
  1410  05E1  0800               	movf	0,w
  1411  05E2  00AA               	movwf	sprintf@val+1
  1412  05E3                     l1314:	
  1413  05E3  3002               	movlw	2
  1414  05E4  00A3               	movwf	??_sprintf
  1415  05E5  0823               	movf	??_sprintf,w
  1416  05E6  07A6               	addwf	sprintf@ap,f
  1417  05E7                     l1316:	
  1418                           
  1419                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1287:    if
      +                          ((int)val < 0) {
  1420  05E7  1FAA               	btfss	sprintf@val+1,7
  1421  05E8  2DEA               	goto	u481
  1422  05E9  2DEB               	goto	u480
  1423  05EA                     u481:	
  1424  05EA  2DF4               	goto	l1322
  1425  05EB                     u480:	
  1426  05EB                     l1318:	
  1427                           
  1428                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1288:     f
      +                          lag |= 0x03;
  1429  05EB  3003               	movlw	3
  1430  05EC  00A3               	movwf	??_sprintf
  1431  05ED  0823               	movf	??_sprintf,w
  1432  05EE  04A7               	iorwf	sprintf@flag,f
  1433  05EF                     l1320:	
  1434                           
  1435                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1289:     v
      +                          al = -val;
  1436  05EF  09A9               	comf	sprintf@val,f
  1437  05F0  09AA               	comf	sprintf@val+1,f
  1438  05F1  0AA9               	incf	sprintf@val,f
  1439  05F2  1903               	skipnz
  1440  05F3  0AAA               	incf	sprintf@val+1,f
  1441  05F4                     l1322:	
  1442                           
  1443                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1292:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1331:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1444  05F4  01AC               	clrf	sprintf@c
  1445  05F5  0AAC               	incf	sprintf@c,f
  1446  05F6                     l1328:	
  1447                           
  1448                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1332:     i
      +                          f(val < dpowers[c])
  1449  05F6  082C               	movf	sprintf@c,w
  1450  05F7  00A3               	movwf	??_sprintf
  1451  05F8  0723               	addwf	??_sprintf,w
  1452  05F9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1453  05FA  0084               	movwf	4
  1454  05FB  120A  118A  200D  120A  118A  	fcall	stringdir
  1455  0600  00A4               	movwf	??_sprintf+1
  1456  0601  120A  118A  200D  120A  118A  	fcall	stringdir
  1457  0606  00A5               	movwf	??_sprintf+2
  1458  0607  0825               	movf	??_sprintf+2,w
  1459  0608  022A               	subwf	sprintf@val+1,w
  1460  0609  1D03               	skipz
  1461  060A  2E0D               	goto	u495
  1462  060B  0824               	movf	??_sprintf+1,w
  1463  060C  0229               	subwf	sprintf@val,w
  1464  060D                     u495:	
  1465  060D  1803               	skipnc
  1466  060E  2E10               	goto	u491
  1467  060F  2E11               	goto	u490
  1468  0610                     u491:	
  1469  0610  2E12               	goto	l1332
  1470  0611                     u490:	
  1471  0611  2E1C               	goto	l1334
  1472  0612                     l1332:	
  1473  0612  3001               	movlw	1
  1474  0613  00A3               	movwf	??_sprintf
  1475  0614  0823               	movf	??_sprintf,w
  1476  0615  07AC               	addwf	sprintf@c,f
  1477  0616  3005               	movlw	5
  1478  0617  062C               	xorwf	sprintf@c,w
  1479  0618  1D03               	btfss	3,2
  1480  0619  2E1B               	goto	u501
  1481  061A  2E1C               	goto	u500
  1482  061B                     u501:	
  1483  061B  2DF6               	goto	l1328
  1484  061C                     u500:	
  1485  061C                     l1334:	
  1486                           
  1487                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1448:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1464:    if(f
      +                          lag & 0x03)
  1488  061C  0827               	movf	sprintf@flag,w
  1489  061D  3903               	andlw	3
  1490  061E  1903               	btfsc	3,2
  1491  061F  2E21               	goto	u511
  1492  0620  2E22               	goto	u510
  1493  0621                     u511:	
  1494  0621  2E2D               	goto	l1340
  1495  0622                     u510:	
  1496  0622                     l1336:	
  1497                           
  1498                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1465:     (
      +                          (*sp++ = ('-')));
  1499  0622  302D               	movlw	45
  1500  0623  00A3               	movwf	??_sprintf
  1501  0624  082B               	movf	sprintf@sp,w
  1502  0625  0084               	movwf	4
  1503  0626  0823               	movf	??_sprintf,w
  1504  0627  1383               	bcf	3,7	;select IRP bank0
  1505  0628  0080               	movwf	0
  1506  0629                     l1338:	
  1507  0629  3001               	movlw	1
  1508  062A  00A3               	movwf	??_sprintf
  1509  062B  0823               	movf	??_sprintf,w
  1510  062C  07AB               	addwf	sprintf@sp,f
  1511  062D                     l1340:	
  1512                           
  1513                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1495:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1498:   prec 
      +                          = c;
  1514  062D  082C               	movf	sprintf@c,w
  1515  062E  00A3               	movwf	??_sprintf
  1516  062F  0823               	movf	??_sprintf,w
  1517  0630  00A8               	movwf	sprintf@prec
  1518                           
  1519                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1520  0631  2E6B               	goto	l1348
  1521  0632                     l1342:	
  1522                           
  1523                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1504:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1515:     c 
      +                          = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1524  0632  300A               	movlw	10
  1525  0633  00F8               	movwf	___lwmod@divisor
  1526  0634  3000               	movlw	0
  1527  0635  00F9               	movwf	___lwmod@divisor+1
  1528  0636  0828               	movf	sprintf@prec,w
  1529  0637  00A3               	movwf	??_sprintf
  1530  0638  0723               	addwf	??_sprintf,w
  1531  0639  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1532  063A  0084               	movwf	4
  1533  063B  120A  118A  200D  120A  118A  	fcall	stringdir
  1534  0640  00F0               	movwf	___lwdiv@divisor
  1535  0641  120A  118A  200D  120A  118A  	fcall	stringdir
  1536  0646  00F1               	movwf	___lwdiv@divisor+1
  1537  0647  082A               	movf	sprintf@val+1,w
  1538  0648  00F3               	movwf	___lwdiv@dividend+1
  1539  0649  0829               	movf	sprintf@val,w
  1540  064A  00F2               	movwf	___lwdiv@dividend
  1541  064B  120A  118A  24F3  120A  118A  	fcall	___lwdiv
  1542  0650  0871               	movf	?___lwdiv+1,w
  1543  0651  00FB               	movwf	___lwmod@dividend+1
  1544  0652  0870               	movf	?___lwdiv,w
  1545  0653  00FA               	movwf	___lwmod@dividend
  1546  0654  120A  118A  2477  120A  118A  	fcall	___lwmod
  1547  0659  0878               	movf	?___lwmod,w
  1548  065A  3E30               	addlw	48
  1549  065B  1283               	bcf	3,5	;RP0=0, select bank0
  1550  065C  1303               	bcf	3,6	;RP1=0, select bank0
  1551  065D  00A4               	movwf	??_sprintf+1
  1552  065E  0824               	movf	??_sprintf+1,w
  1553  065F  00AC               	movwf	sprintf@c
  1554  0660                     l1344:	
  1555                           
  1556                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1549:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1550:    ((*
      +                          sp++ = (c)));
  1557  0660  082C               	movf	sprintf@c,w
  1558  0661  00A3               	movwf	??_sprintf
  1559  0662  082B               	movf	sprintf@sp,w
  1560  0663  0084               	movwf	4
  1561  0664  0823               	movf	??_sprintf,w
  1562  0665  1383               	bcf	3,7	;select IRP bank0
  1563  0666  0080               	movwf	0
  1564  0667                     l1346:	
  1565  0667  3001               	movlw	1
  1566  0668  00A3               	movwf	??_sprintf
  1567  0669  0823               	movf	??_sprintf,w
  1568  066A  07AB               	addwf	sprintf@sp,f
  1569  066B                     l1348:	
  1570                           
  1571                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1572  066B  30FF               	movlw	255
  1573  066C  00A3               	movwf	??_sprintf
  1574  066D  0823               	movf	??_sprintf,w
  1575  066E  07A8               	addwf	sprintf@prec,f
  1576  066F  0A28               	incf	sprintf@prec,w
  1577  0670  1D03               	btfss	3,2
  1578  0671  2E73               	goto	u521
  1579  0672  2E74               	goto	u520
  1580  0673                     u521:	
  1581  0673  2E32               	goto	l1342
  1582  0674                     u520:	
  1583  0674                     l1350:	
  1584                           
  1585                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1586  0674  3001               	movlw	1
  1587  0675  07A0               	addwf	sprintf@f,f
  1588  0676  30FF               	movlw	-1
  1589  0677  0720               	addwf	sprintf@f,w
  1590  0678  0084               	movwf	4
  1591  0679  120A  118A  200D  120A  118A  	fcall	stringdir
  1592  067E  00A3               	movwf	??_sprintf
  1593  067F  0823               	movf	??_sprintf,w
  1594  0680  00AC               	movwf	sprintf@c
  1595  0681  082C               	movf	sprintf@c,w
  1596  0682  1D03               	btfss	3,2
  1597  0683  2E85               	goto	u531
  1598  0684  2E86               	goto	u530
  1599  0685                     u531:	
  1600  0685  2DAB               	goto	l1300
  1601  0686                     u530:	
  1602  0686                     l1352:	
  1603                           
  1604                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1564:  *sp 
      +                          = 0;
  1605  0686  082B               	movf	sprintf@sp,w
  1606  0687  0084               	movwf	4
  1607  0688  1383               	bcf	3,7	;select IRP bank0
  1608  0689  0180               	clrf	0
  1609  068A                     l304:	
  1610  068A  0008               	return
  1611  068B                     __end_of_sprintf:	
  1612                           
  1613                           	psect	text3
  1614  0477                     __ptext3:	
  1615 ;; *************** function ___lwmod *****************
  1616 ;; Defined at:
  1617 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  divisor         2    8[COMMON] unsigned int 
  1620 ;;  dividend        2   10[COMMON] unsigned int 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  counter         1   13[COMMON] unsigned char 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  2    8[COMMON] unsigned int 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2, status,0
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1632 ;;      Params:         4       0       0       0       0
  1633 ;;      Locals:         1       0       0       0       0
  1634 ;;      Temps:          1       0       0       0       0
  1635 ;;      Totals:         6       0       0       0       0
  1636 ;;Total ram usage:        6 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_sprintf
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           
  1646                           ;psect for function ___lwmod
  1647  0477                     ___lwmod:	
  1648  0477                     l1232:	
  1649                           ;incstack = 0
  1650                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1651                           
  1652  0477  0878               	movf	___lwmod@divisor,w
  1653  0478  0479               	iorwf	___lwmod@divisor+1,w
  1654  0479  1903               	btfsc	3,2
  1655  047A  2C7C               	goto	u351
  1656  047B  2C7D               	goto	u350
  1657  047C                     u351:	
  1658  047C  2CAC               	goto	l1250
  1659  047D                     u350:	
  1660  047D                     l1234:	
  1661  047D  01FD               	clrf	___lwmod@counter
  1662  047E  0AFD               	incf	___lwmod@counter,f
  1663  047F  2C8B               	goto	l1240
  1664  0480                     l1236:	
  1665  0480  3001               	movlw	1
  1666  0481                     u365:	
  1667  0481  1003               	clrc
  1668  0482  0DF8               	rlf	___lwmod@divisor,f
  1669  0483  0DF9               	rlf	___lwmod@divisor+1,f
  1670  0484  3EFF               	addlw	-1
  1671  0485  1D03               	skipz
  1672  0486  2C81               	goto	u365
  1673  0487                     l1238:	
  1674  0487  3001               	movlw	1
  1675  0488  00FC               	movwf	??___lwmod
  1676  0489  087C               	movf	??___lwmod,w
  1677  048A  07FD               	addwf	___lwmod@counter,f
  1678  048B                     l1240:	
  1679  048B  1FF9               	btfss	___lwmod@divisor+1,7
  1680  048C  2C8E               	goto	u371
  1681  048D  2C8F               	goto	u370
  1682  048E                     u371:	
  1683  048E  2C80               	goto	l1236
  1684  048F                     u370:	
  1685  048F                     l1242:	
  1686  048F  0879               	movf	___lwmod@divisor+1,w
  1687  0490  027B               	subwf	___lwmod@dividend+1,w
  1688  0491  1D03               	skipz
  1689  0492  2C95               	goto	u385
  1690  0493  0878               	movf	___lwmod@divisor,w
  1691  0494  027A               	subwf	___lwmod@dividend,w
  1692  0495                     u385:	
  1693  0495  1C03               	skipc
  1694  0496  2C98               	goto	u381
  1695  0497  2C99               	goto	u380
  1696  0498                     u381:	
  1697  0498  2C9F               	goto	l1246
  1698  0499                     u380:	
  1699  0499                     l1244:	
  1700  0499  0878               	movf	___lwmod@divisor,w
  1701  049A  02FA               	subwf	___lwmod@dividend,f
  1702  049B  0879               	movf	___lwmod@divisor+1,w
  1703  049C  1C03               	skipc
  1704  049D  03FB               	decf	___lwmod@dividend+1,f
  1705  049E  02FB               	subwf	___lwmod@dividend+1,f
  1706  049F                     l1246:	
  1707  049F  3001               	movlw	1
  1708  04A0                     u395:	
  1709  04A0  1003               	clrc
  1710  04A1  0CF9               	rrf	___lwmod@divisor+1,f
  1711  04A2  0CF8               	rrf	___lwmod@divisor,f
  1712  04A3  3EFF               	addlw	-1
  1713  04A4  1D03               	skipz
  1714  04A5  2CA0               	goto	u395
  1715  04A6                     l1248:	
  1716  04A6  3001               	movlw	1
  1717  04A7  02FD               	subwf	___lwmod@counter,f
  1718  04A8  1D03               	btfss	3,2
  1719  04A9  2CAB               	goto	u401
  1720  04AA  2CAC               	goto	u400
  1721  04AB                     u401:	
  1722  04AB  2C8F               	goto	l1242
  1723  04AC                     u400:	
  1724  04AC                     l1250:	
  1725  04AC  087B               	movf	___lwmod@dividend+1,w
  1726  04AD  00F9               	movwf	?___lwmod+1
  1727  04AE  087A               	movf	___lwmod@dividend,w
  1728  04AF  00F8               	movwf	?___lwmod
  1729  04B0                     l590:	
  1730  04B0  0008               	return
  1731  04B1                     __end_of___lwmod:	
  1732                           
  1733                           	psect	text4
  1734  04F3                     __ptext4:	
  1735 ;; *************** function ___lwdiv *****************
  1736 ;; Defined at:
  1737 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  divisor         2    0[COMMON] unsigned int 
  1740 ;;  dividend        2    2[COMMON] unsigned int 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  quotient        2    5[COMMON] unsigned int 
  1743 ;;  counter         1    7[COMMON] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  2    0[COMMON] unsigned int 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1753 ;;      Params:         4       0       0       0       0
  1754 ;;      Locals:         3       0       0       0       0
  1755 ;;      Temps:          1       0       0       0       0
  1756 ;;      Totals:         8       0       0       0       0
  1757 ;;Total ram usage:        8 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; This function calls:
  1760 ;;		Nothing
  1761 ;; This function is called by:
  1762 ;;		_sprintf
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           
  1767                           ;psect for function ___lwdiv
  1768  04F3                     ___lwdiv:	
  1769  04F3                     l1206:	
  1770                           ;incstack = 0
  1771                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1772                           
  1773  04F3  01F5               	clrf	___lwdiv@quotient
  1774  04F4  01F6               	clrf	___lwdiv@quotient+1
  1775  04F5                     l1208:	
  1776  04F5  0870               	movf	___lwdiv@divisor,w
  1777  04F6  0471               	iorwf	___lwdiv@divisor+1,w
  1778  04F7  1903               	btfsc	3,2
  1779  04F8  2CFA               	goto	u281
  1780  04F9  2CFB               	goto	u280
  1781  04FA                     u281:	
  1782  04FA  2D32               	goto	l1228
  1783  04FB                     u280:	
  1784  04FB                     l1210:	
  1785  04FB  01F7               	clrf	___lwdiv@counter
  1786  04FC  0AF7               	incf	___lwdiv@counter,f
  1787  04FD  2D09               	goto	l1216
  1788  04FE                     l1212:	
  1789  04FE  3001               	movlw	1
  1790  04FF                     u295:	
  1791  04FF  1003               	clrc
  1792  0500  0DF0               	rlf	___lwdiv@divisor,f
  1793  0501  0DF1               	rlf	___lwdiv@divisor+1,f
  1794  0502  3EFF               	addlw	-1
  1795  0503  1D03               	skipz
  1796  0504  2CFF               	goto	u295
  1797  0505                     l1214:	
  1798  0505  3001               	movlw	1
  1799  0506  00F4               	movwf	??___lwdiv
  1800  0507  0874               	movf	??___lwdiv,w
  1801  0508  07F7               	addwf	___lwdiv@counter,f
  1802  0509                     l1216:	
  1803  0509  1FF1               	btfss	___lwdiv@divisor+1,7
  1804  050A  2D0C               	goto	u301
  1805  050B  2D0D               	goto	u300
  1806  050C                     u301:	
  1807  050C  2CFE               	goto	l1212
  1808  050D                     u300:	
  1809  050D                     l1218:	
  1810  050D  3001               	movlw	1
  1811  050E                     u315:	
  1812  050E  1003               	clrc
  1813  050F  0DF5               	rlf	___lwdiv@quotient,f
  1814  0510  0DF6               	rlf	___lwdiv@quotient+1,f
  1815  0511  3EFF               	addlw	-1
  1816  0512  1D03               	skipz
  1817  0513  2D0E               	goto	u315
  1818  0514  0871               	movf	___lwdiv@divisor+1,w
  1819  0515  0273               	subwf	___lwdiv@dividend+1,w
  1820  0516  1D03               	skipz
  1821  0517  2D1A               	goto	u325
  1822  0518  0870               	movf	___lwdiv@divisor,w
  1823  0519  0272               	subwf	___lwdiv@dividend,w
  1824  051A                     u325:	
  1825  051A  1C03               	skipc
  1826  051B  2D1D               	goto	u321
  1827  051C  2D1E               	goto	u320
  1828  051D                     u321:	
  1829  051D  2D25               	goto	l1224
  1830  051E                     u320:	
  1831  051E                     l1220:	
  1832  051E  0870               	movf	___lwdiv@divisor,w
  1833  051F  02F2               	subwf	___lwdiv@dividend,f
  1834  0520  0871               	movf	___lwdiv@divisor+1,w
  1835  0521  1C03               	skipc
  1836  0522  03F3               	decf	___lwdiv@dividend+1,f
  1837  0523  02F3               	subwf	___lwdiv@dividend+1,f
  1838  0524                     l1222:	
  1839  0524  1475               	bsf	___lwdiv@quotient,0
  1840  0525                     l1224:	
  1841  0525  3001               	movlw	1
  1842  0526                     u335:	
  1843  0526  1003               	clrc
  1844  0527  0CF1               	rrf	___lwdiv@divisor+1,f
  1845  0528  0CF0               	rrf	___lwdiv@divisor,f
  1846  0529  3EFF               	addlw	-1
  1847  052A  1D03               	skipz
  1848  052B  2D26               	goto	u335
  1849  052C                     l1226:	
  1850  052C  3001               	movlw	1
  1851  052D  02F7               	subwf	___lwdiv@counter,f
  1852  052E  1D03               	btfss	3,2
  1853  052F  2D31               	goto	u341
  1854  0530  2D32               	goto	u340
  1855  0531                     u341:	
  1856  0531  2D0D               	goto	l1218
  1857  0532                     u340:	
  1858  0532                     l1228:	
  1859  0532  0876               	movf	___lwdiv@quotient+1,w
  1860  0533  00F1               	movwf	?___lwdiv+1
  1861  0534  0875               	movf	___lwdiv@quotient,w
  1862  0535  00F0               	movwf	?___lwdiv
  1863  0536                     l580:	
  1864  0536  0008               	return
  1865  0537                     __end_of___lwdiv:	
  1866                           
  1867                           	psect	text5
  1868  03AE                     __ptext5:	
  1869 ;; *************** function _spiWrite *****************
  1870 ;; Defined at:
  1871 ;;		line 49 in file "Lib_SPI_Ma.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  dat             1    wreg     unsigned char 
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;  dat             1    0[COMMON] unsigned char 
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1885 ;;      Params:         0       0       0       0       0
  1886 ;;      Locals:         1       0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0
  1888 ;;      Totals:         1       0       0       0       0
  1889 ;;Total ram usage:        1 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; This function calls:
  1892 ;;		Nothing
  1893 ;; This function is called by:
  1894 ;;		_main
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           
  1899                           ;psect for function _spiWrite
  1900  03AE                     _spiWrite:	
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _spiWrite: [wreg]
  1904                           ;spiWrite@dat stored from wreg
  1905  03AE  00F0               	movwf	spiWrite@dat
  1906  03AF                     l1392:	
  1907                           
  1908                           ;Lib_SPI_Ma.c: 49: void spiWrite(char dat);Lib_SPI_Ma.c: 50: {;Lib_SPI_Ma.c: 51:     SSP
      +                          BUF = dat;
  1909  03AF  0870               	movf	spiWrite@dat,w
  1910  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  1911  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  1912  03B2  0093               	movwf	19	;volatile
  1913  03B3                     l81:	
  1914  03B3  0008               	return
  1915  03B4                     __end_of_spiWrite:	
  1916                           
  1917                           	psect	text6
  1918  03C2                     __ptext6:	
  1919 ;; *************** function _spiRead *****************
  1920 ;; Defined at:
  1921 ;;		line 62 in file "Lib_SPI_Ma.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      unsigned char 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2, status,0, pclath, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1935 ;;      Params:         0       0       0       0       0
  1936 ;;      Locals:         0       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0
  1938 ;;      Totals:         0       0       0       0       0
  1939 ;;Total ram usage:        0 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    1
  1942 ;; This function calls:
  1943 ;;		_spiReceiveWait
  1944 ;; This function is called by:
  1945 ;;		_main
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           
  1950                           ;psect for function _spiRead
  1951  03C2                     _spiRead:	
  1952  03C2                     l1394:	
  1953                           ;incstack = 0
  1954                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1955                           
  1956                           
  1957                           ;Lib_SPI_Ma.c: 64:     spiReceiveWait();
  1958  03C2  120A  118A  23BB  120A  118A  	fcall	_spiReceiveWait
  1959  03C7                     l1396:	
  1960                           
  1961                           ;Lib_SPI_Ma.c: 65:     return(SSPBUF);
  1962  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  1963  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  1964  03C9  0813               	movf	19,w	;volatile
  1965  03CA                     l89:	
  1966  03CA  0008               	return
  1967  03CB                     __end_of_spiRead:	
  1968                           
  1969                           	psect	text7
  1970  03BB                     __ptext7:	
  1971 ;; *************** function _spiReceiveWait *****************
  1972 ;; Defined at:
  1973 ;;		line 44 in file "Lib_SPI_Ma.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;		None
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		None
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1987 ;;      Params:         0       0       0       0       0
  1988 ;;      Locals:         0       0       0       0       0
  1989 ;;      Temps:          0       0       0       0       0
  1990 ;;      Totals:         0       0       0       0       0
  1991 ;;Total ram usage:        0 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_spiRead
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           
  2001                           ;psect for function _spiReceiveWait
  2002  03BB                     _spiReceiveWait:	
  2003  03BB                     l1296:	
  2004                           ;incstack = 0
  2005                           ; Regs used in _spiReceiveWait: []
  2006                           
  2007  03BB                     l75:	
  2008                           ;Lib_SPI_Ma.c: 46:     while ( !SSPSTATbits.BF );
  2009                           
  2010  03BB  1683               	bsf	3,5	;RP0=1, select bank1
  2011  03BC  1303               	bcf	3,6	;RP1=0, select bank1
  2012  03BD  1C14               	btfss	20,0	;volatile
  2013  03BE  2BC0               	goto	u461
  2014  03BF  2BC1               	goto	u460
  2015  03C0                     u461:	
  2016  03C0  2BBB               	goto	l75
  2017  03C1                     u460:	
  2018  03C1                     l78:	
  2019  03C1  0008               	return
  2020  03C2                     __end_of_spiReceiveWait:	
  2021                           
  2022                           	psect	text8
  2023  0537                     __ptext8:	
  2024 ;; *************** function _setup *****************
  2025 ;; Defined at:
  2026 ;;		line 101 in file "main_s.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0
  2042 ;;      Temps:          1       0       0       0       0
  2043 ;;      Totals:         1       0       0       0       0
  2044 ;;Total ram usage:        1 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    2
  2047 ;; This function calls:
  2048 ;;		_clcLCD
  2049 ;;		_initLCD
  2050 ;;		_setCursorLCD
  2051 ;;		_spiInit
  2052 ;;		_writeStrLCD
  2053 ;; This function is called by:
  2054 ;;		_main
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           
  2059                           ;psect for function _setup
  2060  0537                     _setup:	
  2061  0537                     l1360:	
  2062                           ;incstack = 0
  2063                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2064                           
  2065                           
  2066                           ;main_s.c: 102:     ANSEL = 0;
  2067  0537  1683               	bsf	3,5	;RP0=1, select bank3
  2068  0538  1703               	bsf	3,6	;RP1=1, select bank3
  2069  0539  0188               	clrf	8	;volatile
  2070                           
  2071                           ;main_s.c: 103:     ANSELH = 0;
  2072  053A  0189               	clrf	9	;volatile
  2073                           
  2074                           ;main_s.c: 105:     TRISB = 0;
  2075  053B  1683               	bsf	3,5	;RP0=1, select bank1
  2076  053C  1303               	bcf	3,6	;RP1=0, select bank1
  2077  053D  0186               	clrf	6	;volatile
  2078  053E                     l1362:	
  2079                           
  2080                           ;main_s.c: 106:     TRISC = 0b00010000;
  2081  053E  3010               	movlw	16
  2082  053F  0087               	movwf	7	;volatile
  2083  0540                     l1364:	
  2084                           
  2085                           ;main_s.c: 107:     TRISD = 0;
  2086  0540  0188               	clrf	8	;volatile
  2087  0541                     l1366:	
  2088                           
  2089                           ;main_s.c: 108:     PORTB = 0;
  2090  0541  1283               	bcf	3,5	;RP0=0, select bank0
  2091  0542  1303               	bcf	3,6	;RP1=0, select bank0
  2092  0543  0186               	clrf	6	;volatile
  2093  0544                     l1368:	
  2094                           
  2095                           ;main_s.c: 109:     PORTD = 0;
  2096  0544  0188               	clrf	8	;volatile
  2097  0545                     l1370:	
  2098                           
  2099                           ;main_s.c: 111:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_
      +                          LOW, SPI_IDLE_2_ACTIVE);
  2100  0545  01F0               	clrf	spiInit@sDataSample
  2101  0546  01F1               	clrf	spiInit@sClockIdle
  2102  0547  01F2               	clrf	spiInit@sTransmitEdge
  2103  0548  3020               	movlw	32
  2104  0549  120A  118A  23EE  120A  118A  	fcall	_spiInit
  2105  054E                     l1372:	
  2106                           
  2107                           ;main_s.c: 113:     initLCD();
  2108  054E  120A  118A  243D  120A  118A  	fcall	_initLCD
  2109  0553                     l1374:	
  2110                           
  2111                           ;main_s.c: 114:     clcLCD();
  2112  0553  120A  118A  23B4  120A  118A  	fcall	_clcLCD
  2113  0558                     l1376:	
  2114                           
  2115                           ;main_s.c: 117:     setCursorLCD(1, 1);
  2116  0558  01F3               	clrf	setCursorLCD@x
  2117  0559  0AF3               	incf	setCursorLCD@x,f
  2118  055A  3001               	movlw	1
  2119  055B  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  2120  0560                     l1378:	
  2121                           
  2122                           ;main_s.c: 118:     writeStrLCD("PR");
  2123  0560  301E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2124  0561  00F2               	movwf	writeStrLCD@string
  2125  0562  3080               	movlw	128
  2126  0563  00F3               	movwf	writeStrLCD@string+1
  2127  0564  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  2128  0569                     l1380:	
  2129                           
  2130                           ;main_s.c: 119:     setCursorLCD(1, 4);
  2131  0569  3004               	movlw	4
  2132  056A  00F9               	movwf	??_setup
  2133  056B  0879               	movf	??_setup,w
  2134  056C  00F3               	movwf	setCursorLCD@x
  2135  056D  3001               	movlw	1
  2136  056E  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  2137  0573                     l1382:	
  2138                           
  2139                           ;main_s.c: 120:     writeStrLCD("TEM");
  2140  0573  3013               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2141  0574  00F2               	movwf	writeStrLCD@string
  2142  0575  3080               	movlw	128
  2143  0576  00F3               	movwf	writeStrLCD@string+1
  2144  0577  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  2145  057C                     l1384:	
  2146                           
  2147                           ;main_s.c: 121:     setCursorLCD(1, 9);
  2148  057C  3009               	movlw	9
  2149  057D  00F9               	movwf	??_setup
  2150  057E  0879               	movf	??_setup,w
  2151  057F  00F3               	movwf	setCursorLCD@x
  2152  0580  3001               	movlw	1
  2153  0581  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  2154  0586                     l1386:	
  2155                           
  2156                           ;main_s.c: 122:     writeStrLCD("HUM");
  2157  0586  3017               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2158  0587  00F2               	movwf	writeStrLCD@string
  2159  0588  3080               	movlw	128
  2160  0589  00F3               	movwf	writeStrLCD@string+1
  2161  058A  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  2162  058F                     l1388:	
  2163                           
  2164                           ;main_s.c: 123:     setCursorLCD(1, 14);
  2165  058F  300E               	movlw	14
  2166  0590  00F9               	movwf	??_setup
  2167  0591  0879               	movf	??_setup,w
  2168  0592  00F3               	movwf	setCursorLCD@x
  2169  0593  3001               	movlw	1
  2170  0594  120A  118A  2403  120A  118A  	fcall	_setCursorLCD
  2171  0599                     l1390:	
  2172                           
  2173                           ;main_s.c: 124:     writeStrLCD("SOL");
  2174  0599  300F               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2175  059A  00F2               	movwf	writeStrLCD@string
  2176  059B  3080               	movlw	128
  2177  059C  00F3               	movwf	writeStrLCD@string+1
  2178  059D  120A  118A  24B1  120A  118A  	fcall	_writeStrLCD
  2179  05A2                     l57:	
  2180  05A2  0008               	return
  2181  05A3                     __end_of_setup:	
  2182                           
  2183                           	psect	text9
  2184  04B1                     __ptext9:	
  2185 ;; *************** function _writeStrLCD *****************
  2186 ;; Defined at:
  2187 ;;		line 30 in file "LCD.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;  string          2    2[COMMON] PTR unsigned char 
  2190 ;;		 -> writeIntLCD@buffer(4), STR_9(4), STR_8(4), STR_7(4), 
  2191 ;;		 -> STR_6(3), STR_5(4), STR_4(4), STR_3(4), 
  2192 ;;		 -> STR_2(4), STR_1(4), 
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;  cont            2    7[COMMON] int 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2204 ;;      Params:         2       0       0       0       0
  2205 ;;      Locals:         2       0       0       0       0
  2206 ;;      Temps:          3       0       0       0       0
  2207 ;;      Totals:         7       0       0       0       0
  2208 ;;Total ram usage:        7 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    1
  2211 ;; This function calls:
  2212 ;;		_writeCharLCD
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;;		_setup
  2216 ;;		_writeIntLCD
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           
  2221                           ;psect for function _writeStrLCD
  2222  04B1                     _writeStrLCD:	
  2223  04B1                     l1262:	
  2224                           ;incstack = 0
  2225                           ; Regs used in _writeStrLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2226                           
  2227                           
  2228                           ;LCD.c: 31:  int cont;;LCD.c: 32:  for(cont=0;string[cont]!='\0';cont++){
  2229  04B1  01F7               	clrf	writeStrLCD@cont
  2230  04B2  01F8               	clrf	writeStrLCD@cont+1
  2231  04B3  2CD6               	goto	l1268
  2232  04B4                     l1264:	
  2233                           
  2234                           ;LCD.c: 33:         writeCharLCD(string[cont]);
  2235  04B4  0877               	movf	writeStrLCD@cont,w
  2236  04B5  0772               	addwf	writeStrLCD@string,w
  2237  04B6  00F5               	movwf	??_writeStrLCD+1
  2238  04B7  0873               	movf	writeStrLCD@string+1,w
  2239  04B8  00F4               	movwf	??_writeStrLCD
  2240  04B9  1803               	skipnc
  2241  04BA  0AF4               	incf	??_writeStrLCD,f
  2242  04BB  1FF7               	btfss	writeStrLCD@cont,7
  2243  04BC  2CBE               	goto	u420
  2244  04BD  03F4               	decf	??_writeStrLCD,f
  2245  04BE                     u420:	
  2246  04BE  0874               	movf	??_writeStrLCD,w
  2247  04BF  00F6               	movwf	??_writeStrLCD+2
  2248  04C0  0876               	movf	??_writeStrLCD+2,w
  2249  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2250  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2251  04C3  00FF               	movwf	btemp+1
  2252  04C4  0875               	movf	??_writeStrLCD+1,w
  2253  04C5  0084               	movwf	4
  2254  04C6  120A  118A  2003  120A  118A  	fcall	stringtab
  2255  04CB  120A  118A  23CB  120A  118A  	fcall	_writeCharLCD
  2256  04D0                     l1266:	
  2257                           
  2258                           ;LCD.c: 34:     }
  2259  04D0  3001               	movlw	1
  2260  04D1  07F7               	addwf	writeStrLCD@cont,f
  2261  04D2  1803               	skipnc
  2262  04D3  0AF8               	incf	writeStrLCD@cont+1,f
  2263  04D4  3000               	movlw	0
  2264  04D5  07F8               	addwf	writeStrLCD@cont+1,f
  2265  04D6                     l1268:	
  2266  04D6  0877               	movf	writeStrLCD@cont,w
  2267  04D7  0772               	addwf	writeStrLCD@string,w
  2268  04D8  00F5               	movwf	??_writeStrLCD+1
  2269  04D9  0873               	movf	writeStrLCD@string+1,w
  2270  04DA  00F4               	movwf	??_writeStrLCD
  2271  04DB  1803               	skipnc
  2272  04DC  0AF4               	incf	??_writeStrLCD,f
  2273  04DD  1FF7               	btfss	writeStrLCD@cont,7
  2274  04DE  2CE0               	goto	u430
  2275  04DF  03F4               	decf	??_writeStrLCD,f
  2276  04E0                     u430:	
  2277  04E0  0874               	movf	??_writeStrLCD,w
  2278  04E1  00F6               	movwf	??_writeStrLCD+2
  2279  04E2  0876               	movf	??_writeStrLCD+2,w
  2280  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  2281  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  2282  04E5  00FF               	movwf	btemp+1
  2283  04E6  0875               	movf	??_writeStrLCD+1,w
  2284  04E7  0084               	movwf	4
  2285  04E8  120A  118A  2003  120A  118A  	fcall	stringtab
  2286  04ED  3A00               	xorlw	0
  2287  04EE  1D03               	skipz
  2288  04EF  2CF1               	goto	u441
  2289  04F0  2CF2               	goto	u440
  2290  04F1                     u441:	
  2291  04F1  2CB4               	goto	l1264
  2292  04F2                     u440:	
  2293  04F2                     l178:	
  2294  04F2  0008               	return
  2295  04F3                     __end_of_writeStrLCD:	
  2296                           
  2297                           	psect	text10
  2298  03CB                     __ptext10:	
  2299 ;; *************** function _writeCharLCD *****************
  2300 ;; Defined at:
  2301 ;;		line 37 in file "LCD.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  character       1    wreg     unsigned char 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  character       1    1[COMMON] unsigned char 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2315 ;;      Params:         0       0       0       0       0
  2316 ;;      Locals:         1       0       0       0       0
  2317 ;;      Temps:          1       0       0       0       0
  2318 ;;      Totals:         2       0       0       0       0
  2319 ;;Total ram usage:        2 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; This function calls:
  2322 ;;		Nothing
  2323 ;; This function is called by:
  2324 ;;		_writeStrLCD
  2325 ;;		_writeFloat
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _writeCharLCD
  2331  03CB                     _writeCharLCD:	
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _writeCharLCD: [wreg]
  2335                           ;writeCharLCD@character stored from wreg
  2336  03CB  00F1               	movwf	writeCharLCD@character
  2337  03CC                     l1198:	
  2338                           
  2339                           ;LCD.c: 38:    RD0 = 1;
  2340  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  2341  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  2342  03CE  1408               	bsf	8,0	;volatile
  2343  03CF                     l1200:	
  2344                           
  2345                           ;LCD.c: 39:    PORTB = character;
  2346  03CF  0871               	movf	writeCharLCD@character,w
  2347  03D0  0086               	movwf	6	;volatile
  2348  03D1                     l1202:	
  2349                           
  2350                           ;LCD.c: 40:    RD1 = 1;
  2351  03D1  1488               	bsf	8,1	;volatile
  2352                           
  2353                           ;LCD.c: 41:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2354  03D2  300D               	movlw	13
  2355  03D3  00F0               	movwf	??_writeCharLCD
  2356  03D4                     u607:	
  2357  03D4  0BF0               	decfsz	??_writeCharLCD,f
  2358  03D5  2BD4               	goto	u607
  2359  03D6                     l1204:	
  2360                           
  2361                           ;LCD.c: 42:    RD1 = 0;
  2362  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2363  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2364  03D8  1088               	bcf	8,1	;volatile
  2365  03D9                     l181:	
  2366  03D9  0008               	return
  2367  03DA                     __end_of_writeCharLCD:	
  2368                           
  2369                           	psect	text11
  2370  03EE                     __ptext11:	
  2371 ;; *************** function _spiInit *****************
  2372 ;; Defined at:
  2373 ;;		line 27 in file "Lib_SPI_Ma.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;  sType           1    wreg     enum E1293
  2376 ;;  sDataSample     1    0[COMMON] enum E1301
  2377 ;;  sClockIdle      1    1[COMMON] enum E1305
  2378 ;;  sTransmitEdg    1    2[COMMON] enum E1309
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  sType           1    3[COMMON] enum E1293
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2390 ;;      Params:         3       0       0       0       0
  2391 ;;      Locals:         1       0       0       0       0
  2392 ;;      Temps:          0       0       0       0       0
  2393 ;;      Totals:         4       0       0       0       0
  2394 ;;Total ram usage:        4 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; This function calls:
  2397 ;;		Nothing
  2398 ;; This function is called by:
  2399 ;;		_setup
  2400 ;;		_conf
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           
  2405                           ;psect for function _spiInit
  2406  03EE                     _spiInit:	
  2407                           
  2408                           ;incstack = 0
  2409                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2410                           ;spiInit@sType stored from wreg
  2411  03EE  00F3               	movwf	spiInit@sType
  2412  03EF                     l1270:	
  2413                           
  2414                           ;Lib_SPI_Ma.c: 27: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_I
      +                          dle sClockIdle, Spi_Transmit_Edge sTransmitEdge);Lib_SPI_Ma.c: 28: {;Lib_SPI_Ma.c: 30:  
      +                             if(sType & 0b00000100)
  2415  03EF  1D73               	btfss	spiInit@sType,2
  2416  03F0  2BF2               	goto	u451
  2417  03F1  2BF3               	goto	u450
  2418  03F2                     u451:	
  2419  03F2  2BF8               	goto	l1274
  2420  03F3                     u450:	
  2421  03F3                     l1272:	
  2422                           
  2423                           ;Lib_SPI_Ma.c: 31:     {;Lib_SPI_Ma.c: 32:         SSPSTAT = sTransmitEdge;
  2424  03F3  0872               	movf	spiInit@sTransmitEdge,w
  2425  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2426  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  2427  03F6  0094               	movwf	20	;volatile
  2428                           
  2429                           ;Lib_SPI_Ma.c: 34:     }
  2430  03F7  2BFD               	goto	l71
  2431  03F8                     l1274:	
  2432                           
  2433                           ;Lib_SPI_Ma.c: 36:     {;Lib_SPI_Ma.c: 37:         SSPSTAT = sDataSample | sTransmitEdge
      +                          ;
  2434  03F8  0870               	movf	spiInit@sDataSample,w
  2435  03F9  0472               	iorwf	spiInit@sTransmitEdge,w
  2436  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  2437  03FB  1303               	bcf	3,6	;RP1=0, select bank1
  2438  03FC  0094               	movwf	20	;volatile
  2439  03FD                     l71:	
  2440                           ;Lib_SPI_Ma.c: 39:     }
  2441                           
  2442                           
  2443                           ;Lib_SPI_Ma.c: 41:     SSPCON = sType | sClockIdle;
  2444  03FD  0873               	movf	spiInit@sType,w
  2445  03FE  0471               	iorwf	spiInit@sClockIdle,w
  2446  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0400  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0401  0094               	movwf	20	;volatile
  2449  0402                     l72:	
  2450  0402  0008               	return
  2451  0403                     __end_of_spiInit:	
  2452                           
  2453                           	psect	text12
  2454  0403                     __ptext12:	
  2455 ;; *************** function _setCursorLCD *****************
  2456 ;; Defined at:
  2457 ;;		line 17 in file "LCD.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  y               1    wreg     unsigned char 
  2460 ;;  x               1    3[COMMON] unsigned char 
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;  y               1    5[COMMON] unsigned char 
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2, status,0, pclath, cstack
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2472 ;;      Params:         1       0       0       0       0
  2473 ;;      Locals:         1       0       0       0       0
  2474 ;;      Temps:          1       0       0       0       0
  2475 ;;      Totals:         3       0       0       0       0
  2476 ;;Total ram usage:        3 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; Hardware stack levels required when called:    1
  2479 ;; This function calls:
  2480 ;;		_cmdLCD
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;;		_setup
  2484 ;;		_writeFloat
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _setCursorLCD
  2490  0403                     _setCursorLCD:	
  2491                           
  2492                           ;incstack = 0
  2493                           ; Regs used in _setCursorLCD: [wreg+status,2+status,0+pclath+cstack]
  2494                           ;setCursorLCD@y stored from wreg
  2495  0403  00F5               	movwf	setCursorLCD@y
  2496  0404                     l1254:	
  2497                           
  2498                           ;LCD.c: 18:     if(y == 1){
  2499  0404  0375               	decf	setCursorLCD@y,w
  2500  0405  1D03               	btfss	3,2
  2501  0406  2C08               	goto	u411
  2502  0407  2C09               	goto	u410
  2503  0408                     u411:	
  2504  0408  2C11               	goto	l1258
  2505  0409                     u410:	
  2506  0409                     l1256:	
  2507                           
  2508                           ;LCD.c: 19:         cursor = 0x80 + x - 1;
  2509  0409  0873               	movf	setCursorLCD@x,w
  2510  040A  3E7F               	addlw	127
  2511  040B  00F4               	movwf	??_setCursorLCD
  2512  040C  0874               	movf	??_setCursorLCD,w
  2513  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2514  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2515  040F  00C1               	movwf	_cursor
  2516                           
  2517                           ;LCD.c: 20:     }else{
  2518  0410  2C18               	goto	l1260
  2519  0411                     l1258:	
  2520                           
  2521                           ;LCD.c: 21:         cursor = 0xC0 + x - 1;
  2522  0411  0873               	movf	setCursorLCD@x,w
  2523  0412  3EBF               	addlw	191
  2524  0413  00F4               	movwf	??_setCursorLCD
  2525  0414  0874               	movf	??_setCursorLCD,w
  2526  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2527  0416  1303               	bcf	3,6	;RP1=0, select bank0
  2528  0417  00C1               	movwf	_cursor
  2529  0418                     l1260:	
  2530                           
  2531                           ;LCD.c: 23:     cmdLCD(cursor);
  2532  0418  0841               	movf	_cursor,w
  2533  0419  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2534  041E                     l169:	
  2535  041E  0008               	return
  2536  041F                     __end_of_setCursorLCD:	
  2537                           
  2538                           	psect	text13
  2539  043D                     __ptext13:	
  2540 ;; *************** function _initLCD *****************
  2541 ;; Defined at:
  2542 ;;		line 45 in file "LCD.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0, pclath, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2556 ;;      Params:         0       0       0       0       0
  2557 ;;      Locals:         0       0       0       0       0
  2558 ;;      Temps:          2       0       0       0       0
  2559 ;;      Totals:         2       0       0       0       0
  2560 ;;Total ram usage:        2 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    1
  2563 ;; This function calls:
  2564 ;;		_cmdLCD
  2565 ;; This function is called by:
  2566 ;;		_setup
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           
  2571                           ;psect for function _initLCD
  2572  043D                     _initLCD:	
  2573  043D                     l1276:	
  2574                           ;incstack = 0
  2575                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  2576                           
  2577                           
  2578                           ;LCD.c: 46:      _delay((unsigned long)((15)*(4000000/4000.0)));
  2579  043D  3014               	movlw	20
  2580  043E  00F4               	movwf	??_initLCD+1
  2581  043F  3079               	movlw	121
  2582  0440  00F3               	movwf	??_initLCD
  2583  0441                     u617:	
  2584  0441  0BF3               	decfsz	??_initLCD,f
  2585  0442  2C41               	goto	u617
  2586  0443  0BF4               	decfsz	??_initLCD+1,f
  2587  0444  2C41               	goto	u617
  2588  0445  2C46               	nop2
  2589  0446                     l1278:	
  2590                           
  2591                           ;LCD.c: 47:     cmdLCD(0x030);
  2592  0446  3030               	movlw	48
  2593  0447  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2594  044C                     l1280:	
  2595                           
  2596                           ;LCD.c: 48:     cmdLCD(0x030);
  2597  044C  3030               	movlw	48
  2598  044D  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2599  0452                     l1282:	
  2600                           
  2601                           ;LCD.c: 49:     cmdLCD(0x030);
  2602  0452  3030               	movlw	48
  2603  0453  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2604  0458                     l1284:	
  2605                           
  2606                           ;LCD.c: 51:     cmdLCD(0x38);
  2607  0458  3038               	movlw	56
  2608  0459  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2609  045E                     l1286:	
  2610                           
  2611                           ;LCD.c: 52:     cmdLCD(0x10);
  2612  045E  3010               	movlw	16
  2613  045F  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2614  0464                     l1288:	
  2615                           
  2616                           ;LCD.c: 53:     cmdLCD(0x01);
  2617  0464  3001               	movlw	1
  2618  0465  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2619  046A                     l1290:	
  2620                           
  2621                           ;LCD.c: 54:     cmdLCD(0x06);
  2622  046A  3006               	movlw	6
  2623  046B  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2624  0470                     l1292:	
  2625                           
  2626                           ;LCD.c: 55:     cmdLCD(0x0E);
  2627  0470  300E               	movlw	14
  2628  0471  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2629  0476                     l184:	
  2630  0476  0008               	return
  2631  0477                     __end_of_initLCD:	
  2632                           
  2633                           	psect	text14
  2634  03B4                     __ptext14:	
  2635 ;; *************** function _clcLCD *****************
  2636 ;; Defined at:
  2637 ;;		line 26 in file "LCD.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0, pclath, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2651 ;;      Params:         0       0       0       0       0
  2652 ;;      Locals:         0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0
  2654 ;;      Totals:         0       0       0       0       0
  2655 ;;Total ram usage:        0 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    1
  2658 ;; This function calls:
  2659 ;;		_cmdLCD
  2660 ;; This function is called by:
  2661 ;;		_setup
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           
  2666                           ;psect for function _clcLCD
  2667  03B4                     _clcLCD:	
  2668  03B4                     l1294:	
  2669                           ;incstack = 0
  2670                           ; Regs used in _clcLCD: [wreg+status,2+status,0+pclath+cstack]
  2671                           
  2672                           
  2673                           ;LCD.c: 27:     cmdLCD(0x01);
  2674  03B4  3001               	movlw	1
  2675  03B5  120A  118A  23DA  120A  118A  	fcall	_cmdLCD
  2676  03BA                     l172:	
  2677  03BA  0008               	return
  2678  03BB                     __end_of_clcLCD:	
  2679                           
  2680                           	psect	text15
  2681  03DA                     __ptext15:	
  2682 ;; *************** function _cmdLCD *****************
  2683 ;; Defined at:
  2684 ;;		line 58 in file "LCD.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  cmd             1    wreg     unsigned char 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  cmd             1    2[COMMON] unsigned char 
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2698 ;;      Params:         0       0       0       0       0
  2699 ;;      Locals:         1       0       0       0       0
  2700 ;;      Temps:          2       0       0       0       0
  2701 ;;      Totals:         3       0       0       0       0
  2702 ;;Total ram usage:        3 bytes
  2703 ;; Hardware stack levels used:    1
  2704 ;; This function calls:
  2705 ;;		Nothing
  2706 ;; This function is called by:
  2707 ;;		_setCursorLCD
  2708 ;;		_clcLCD
  2709 ;;		_initLCD
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           
  2714                           ;psect for function _cmdLCD
  2715  03DA                     _cmdLCD:	
  2716                           
  2717                           ;incstack = 0
  2718                           ; Regs used in _cmdLCD: [wreg]
  2719                           ;cmdLCD@cmd stored from wreg
  2720  03DA  00F2               	movwf	cmdLCD@cmd
  2721  03DB                     l1190:	
  2722                           
  2723                           ;LCD.c: 59:     RD0 = 0;
  2724  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2725  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2726  03DD  1008               	bcf	8,0	;volatile
  2727  03DE                     l1192:	
  2728                           
  2729                           ;LCD.c: 60:  PORTB = cmd;
  2730  03DE  0872               	movf	cmdLCD@cmd,w
  2731  03DF  0086               	movwf	6	;volatile
  2732  03E0                     l1194:	
  2733                           
  2734                           ;LCD.c: 61:  RD1 = 1;
  2735  03E0  1488               	bsf	8,1	;volatile
  2736                           
  2737                           ;LCD.c: 62:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2738  03E1  3006               	movlw	6
  2739  03E2  00F1               	movwf	??_cmdLCD+1
  2740  03E3  3030               	movlw	48
  2741  03E4  00F0               	movwf	??_cmdLCD
  2742  03E5                     u627:	
  2743  03E5  0BF0               	decfsz	??_cmdLCD,f
  2744  03E6  2BE5               	goto	u627
  2745  03E7  0BF1               	decfsz	??_cmdLCD+1,f
  2746  03E8  2BE5               	goto	u627
  2747  03E9  0000               	nop
  2748  03EA                     l1196:	
  2749                           
  2750                           ;LCD.c: 63:     RD1 = 0;
  2751  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  2752  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  2753  03EC  1088               	bcf	8,1	;volatile
  2754  03ED                     l187:	
  2755  03ED  0008               	return
  2756  03EE                     __end_of_cmdLCD:	
  2757  007E                     btemp	set	126	;btemp
  2758  007E                     wtemp0	set	126


Data Sizes:
    Strings     22
    Constant    10
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     23      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    writeStrLCD@string	PTR unsigned char  size(2) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), STR_9(CODE[4]), STR_8(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_writeStrLCD
    _writeStrLCD->_writeCharLCD
    _setCursorLCD->_cmdLCD
    _initLCD->_cmdLCD
    _clcLCD->_cmdLCD

Critical Paths under _main in BANK0

    _main->_writeIntLCD
    _writeIntLCD->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7469
                                             21 BANK0      2     2      0
                       _setCursorLCD
                              _setup
                            _spiRead
                           _spiWrite
                        _writeIntLCD
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeIntLCD                                          8     8      0    2159
                                             13 BANK0      8     8      0
                            _sprintf
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0    2960
                                              9 COMMON     1     1      0
                             _clcLCD
                            _initLCD
                       _setCursorLCD
                            _spiInit
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeStrLCD                                          7     5      2     872
                                              2 COMMON     7     5      2
                       _writeCharLCD
 ---------------------------------------------------------------------------------
 (2) _writeCharLCD                                         2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     588
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _setCursorLCD                                         3     2      1    1456
                                              3 COMMON     3     2      1
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              2     2      0      22
                                              3 COMMON     2     2      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _clcLCD                                               0     0      0      22
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setCursorLCD
     _cmdLCD
   _setup
     _clcLCD
       _cmdLCD
     _initLCD
       _cmdLCD
     _setCursorLCD
       _cmdLCD
     _spiInit
     _writeStrLCD
       _writeCharLCD
   _spiRead
     _spiReceiveWait
   _spiWrite
   _writeIntLCD
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _writeStrLCD
       _writeCharLCD
   _writeStrLCD
     _writeCharLCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      30       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      22       5       42.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      30      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon May 11 11:05:36 2020

                      pc 0002              __CFG_CP$OFF 0000          writeStrLCD@cont 0077  
            _SSPSTATbits 0094                       l71 03FD                       l72 0402  
                     l57 05A2                       l81 03B3                       l75 03BB  
                     l78 03C1                       l89 03CA                       fsr 0004  
                    l304 068A                      l172 03BA                      l181 03D9  
                    l190 043C                      l184 0476                      l169 041E  
                    l178 04F2                      l187 03ED                      l580 0536  
                    l590 04B0                      _RD0 0040                      _RD1 0041  
                    u300 050D                      u301 050C                      u320 051E  
                    u400 04AC                      u321 051D                      u401 04AB  
                    u410 0409                      u411 0408                      u315 050E  
                    u420 04BE                      u340 0532                      u500 061C  
                    u341 0531                      u325 051A                      u501 061B  
                    u430 04E0                      u350 047D                      u510 0622  
                    u335 0526                      u351 047C                      u511 0621  
                    u440 04F2                      u280 04FB                      u520 0674  
                    u441 04F1                      u281 04FA                      u521 0673  
                    u450 03F3                      u370 048F                      u530 0686  
           __CFG_CPD$OFF 0000                      u451 03F2                      u371 048E  
                    u531 0685                      u460 03C1                      u380 0499  
                    u461 03C0                      u381 0498                      u365 0481  
                    u470 05B1                      u607 03D4                      u295 04FF  
                    u471 05B0                      u480 05EB                      u617 0441  
                    u385 0495                      u481 05EA                      u490 0611  
                    u627 03E5                      u395 04A0                      u491 0610  
                    u557 06A9                      u495 060D                      u567 06C7  
                    u577 06E5                      u587 0703                      u597 0721  
                    _hum 0039                      _luz 003B                      fsr0 0004  
                    indf 0000             __CFG_LVP$OFF 0000                     l1200 03CF  
                   l1202 03D1                     l1210 04FB                     l1204 03D6  
                   l1220 051E                     l1212 04FE                     l1300 05AB  
                   l1222 0524                     l1214 0505                     l1206 04F3  
                   l1310 05BE                     l1302 05B1                     l1224 0525  
                   l1216 0509                     l1208 04F5                     l1240 048B  
                   l1232 0477                     l1320 05EF                     l1312 05DB  
                   l1304 05B8                     l1400 0422                     l1226 052C  
                   l1218 050D                     l1242 048F                     l1234 047D  
                   l1250 04AC                     l1322 05F4                     l1314 05E3  
                   l1306 05BD                     l1410 06AE                     l1402 068B  
                   l1260 0418                     l1228 0532                     l1244 0499  
                   l1236 0480                     l1340 062D                     l1332 0612  
                   l1316 05E7                     l1420 06DF                     l1412 06B4  
                   l1404 0690                     l1190 03DB                     l1254 0404  
                   l1270 03EF                     l1262 04B1                     l1246 049F  
                   l1238 0487                     l1342 0632                     l1334 061C  
                   l1318 05EB                     l1350 0674                     l1430 070E  
                   l1422 06EA                     l1414 06C1                     l1406 0696  
                   l1192 03DE                     l1280 044C                     l1256 0409  
                   l1272 03F3                     l1264 04B4                     l1360 0537  
                   l1248 04A6                     l1344 0660                     l1336 0622  
                   l1328 05F6                     l1352 0686                     l1440 073F  
                   l1432 071B                     l1424 06F0                     l1416 06CC  
                   l1408 06A3                     l1194 03E0                     l1290 046A  
                   l1282 0452                     l1258 0411                     l1274 03F8  
                   l1266 04D0                     l1370 0545                     l1362 053E  
                   l1346 0667                     l1338 0629                     l1450 0770  
                   l1442 0747                     l1434 0726                     l1426 06FD  
                   l1418 06D2                     l1196 03EA                     l1292 0470  
                   l1284 0458                     l1276 043D                     l1268 04D6  
                   l1380 0569                     l1372 054E                     l1364 0540  
                   l1348 066B                     l1460 07A5                     l1452 077C  
                   l1444 0753                     l1436 072E                     l1428 0708  
                   l1294 03B4                     l1286 045E                     l1278 0446  
                   l1198 03CC                     l1390 0599                     l1382 0573  
                   l1374 0553                     l1366 0541                     l1550 05D0  
                   l1470 07D7                     l1462 07AE                     l1454 0785  
                   l1446 075C                     l1438 0737                     l1288 0464  
                   l1384 057C                     l1376 0558                     l1368 0544  
                   l1296 03BB                     l1392 03AF                     l1472 07E3  
                   l1464 07BA                     l1456 0791                     l1448 0768  
                   l1386 0586                     l1378 0560                     l1394 03C2  
                   l1298 05A6                     l1466 07C2                     l1458 0799  
                   l1388 058F                     l1396 03C7                     l1468 07CE  
                   STR_1 001D                     STR_2 001D                     STR_3 001D  
                   STR_4 001D                     STR_5 001D                     STR_6 0030  
                   STR_7 0025                     STR_8 0029                     STR_9 0021  
           __CFG_WRT$OFF 0000        writeStrLCD@string 0072                     _main 068B  
                   _temp 003D                     _prox 003F                     btemp 007E  
                   start 0000            __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000  
            _writeIntLCD 041F                    ?_main 0070                    STR_10 002D  
          __CFG_WDTE$OFF 0000                    _ANSEL 0188          __end_of___lwdiv 0537  
        __end_of___lwmod 04B1              _writeStrLCD 04B1                    _SPBRG 0099  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088           __CFG_FCMEN$OFF 0000  
        __end_of_initLCD 0477          __end_of_dpowers 001D                    _setup 0537  
  __size_of_writeCharLCD 000F           __CFG_BOREN$OFF 0000                    pclath 000A  
        __end_of_spiInit 0403          __end_of_spiRead 03CB                    status 0003  
                  wtemp0 007E          __end_of_sprintf 068B          __initialization 07EF  
           __end_of_main 07EF                   ??_main 0035             _writeCharLCD 03CB  
                 _ADCON1 009F                   ?_setup 0070                   _ANSELH 0189  
                 _SPBRGH 009A                   _SSPCON 0014                   _SSPBUF 0013  
         __CFG_PWRTE$OFF 0000        writeIntLCD@buffer 0030        writeIntLCD@numero 0034  
                 _clcLCD 03B4                   _cmdLCD 03DA                   _caudal 0037  
              ??___lwdiv 0074                ??___lwmod 007C                   _cursor 0041  
              ??_initLCD 0073         __end_of_spiWrite 03B4                ??_spiInit 0073  
              ??_spiRead 0070                ??_sprintf 0023  __end_of__initialization 07FC  
         __pcstackCOMMON 0070            __end_of_setup 05A3                  ??_setup 0079  
             __pbssBANK0 0037            ?_setCursorLCD 0073               __pmaintext 068B  
                ?_clcLCD 0070                  ?_cmdLCD 0070  __size_of_spiReceiveWait 0007  
           ?_writeIntLCD 0070             ?_writeStrLCD 0072                  _SSPSTAT 0094  
             __stringtab 0003           ??_setCursorLCD 0074                ?_spiWrite 0070  
          setCursorLCD@x 0073            setCursorLCD@y 0075          __size_of_clcLCD 0007  
        __size_of_cmdLCD 0014                  ___lwdiv 04F3                  ___lwmod 0477  
                __ptext1 041F                  __ptext2 05A3                  __ptext3 0477  
                __ptext4 04F3                  __ptext5 03AE                  __ptext6 03C2  
                __ptext7 03BB                  __ptext8 0537                  __ptext9 04B1  
                _initLCD 043D                  _dpowers 0013                  _spiInit 03EE  
                _spiRead 03C2                  _sprintf 05A3     end_of_initialization 07FC  
              _RCSTAbits 0018               ??_spiWrite 0070              spiWrite@dat 0070  
              _TXSTAbits 0098           _spiReceiveWait 03BB           __end_of_clcLCD 03BB  
         __end_of_cmdLCD 03EE     __end_of_setCursorLCD 041F              _BAUDCTLbits 0187  
   __size_of_writeIntLCD 001E      start_initialization 07EF     __size_of_writeStrLCD 0042  
 __end_of_spiReceiveWait 03C2                 ??_clcLCD 0073                 ??_cmdLCD 0070  
              ___latbits 0002            __pcstackBANK0 0020   __CFG_FOSC$INTRC_CLKOUT 0000  
  writeCharLCD@character 0071              sprintf@flag 0027              sprintf@prec 0028  
       ___lwdiv@dividend 0072                cmdLCD@cmd 0072          ?_spiReceiveWait 0070  
               ?___lwdiv 0070                 ?___lwmod 0078        __size_of_spiWrite 0006  
              __pstrings 0003                 ?_initLCD 0070            ?_writeCharLCD 0070  
               ?_spiInit 0070                 ?_spiRead 0070         ___lwdiv@quotient 0075  
               ?_sprintf 0020           __size_of_setup 006C     spiInit@sTransmitEdge 0072  
               _PIE1bits 008C       spiInit@sDataSample 0070                 _PIR1bits 000C  
  __size_of_setCursorLCD 001C              __stringbase 0012           ??_writeCharLCD 0070  
           _setCursorLCD 0403         __size_of___lwdiv 0044         __size_of___lwmod 003A  
     __end_of__stringtab 0013               sprintf@val 0029         __size_of_initLCD 003A  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077                 __ptext10 03CB  
               __ptext11 03EE                 __ptext12 0403                 __ptext13 043D  
               __ptext14 03B4                 __ptext15 03DA         __size_of_spiInit 0015  
       __size_of_spiRead 0009        __CFG_BOR4V$BOR40V 0000         __size_of_sprintf 00E8  
          __size_of_main 0164                 _spiWrite 03AE             spiInit@sType 0073  
      spiInit@sClockIdle 0071            ??_writeIntLCD 002D            ??_writeStrLCD 0074  
              sprintf@ap 0026                sprintf@sp 002B         ___lwmod@dividend 007A  
       ??_spiReceiveWait 0070     __end_of_writeCharLCD 03DA                stringcode 000D  
             _OSCCONbits 008F                 sprintf@c 002C                 sprintf@f 0020  
        ___lwmod@divisor 0078          ___lwmod@counter 007D                 stringdir 000D  
               stringtab 0003      __end_of_writeIntLCD 043D      __end_of_writeStrLCD 04F3  
