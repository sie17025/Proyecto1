

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon May 11 10:51:21 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.10
    32                           ; Generated 31/07/2019 GMT
    33                           ; 
    34                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  008F                     	;# 
   110  0090                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0097                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009A                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  0105                     	;# 
   129  0107                     	;# 
   130  0108                     	;# 
   131  0109                     	;# 
   132  010C                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  0185                     	;# 
   138  0187                     	;# 
   139  0188                     	;# 
   140  0189                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0008                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001D                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  0086                     	;# 
   181  0087                     	;# 
   182  0088                     	;# 
   183  0089                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  008F                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  009F                     	;# 
   206  0105                     	;# 
   207  0107                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0185                     	;# 
   216  0187                     	;# 
   217  0188                     	;# 
   218  0189                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0013                     	;# 
   242  0014                     	;# 
   243  0015                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001D                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  0081                     	;# 
   257  0085                     	;# 
   258  0086                     	;# 
   259  0087                     	;# 
   260  0088                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  008F                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  0105                     	;# 
   285  0107                     	;# 
   286  0108                     	;# 
   287  0109                     	;# 
   288  010C                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  0185                     	;# 
   294  0187                     	;# 
   295  0188                     	;# 
   296  0189                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0008                     	;# 
   308  0009                     	;# 
   309  000A                     	;# 
   310  000B                     	;# 
   311  000C                     	;# 
   312  000D                     	;# 
   313  000E                     	;# 
   314  000E                     	;# 
   315  000F                     	;# 
   316  0010                     	;# 
   317  0011                     	;# 
   318  0012                     	;# 
   319  0013                     	;# 
   320  0014                     	;# 
   321  0015                     	;# 
   322  0015                     	;# 
   323  0016                     	;# 
   324  0017                     	;# 
   325  0018                     	;# 
   326  0019                     	;# 
   327  001A                     	;# 
   328  001B                     	;# 
   329  001B                     	;# 
   330  001C                     	;# 
   331  001D                     	;# 
   332  001E                     	;# 
   333  001F                     	;# 
   334  0081                     	;# 
   335  0085                     	;# 
   336  0086                     	;# 
   337  0087                     	;# 
   338  0088                     	;# 
   339  0089                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  008F                     	;# 
   344  0090                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  009F                     	;# 
   362  0105                     	;# 
   363  0107                     	;# 
   364  0108                     	;# 
   365  0109                     	;# 
   366  010C                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  0185                     	;# 
   372  0187                     	;# 
   373  0188                     	;# 
   374  0189                     	;# 
   375  018C                     	;# 
   376  018D                     	;# 
   377                           
   378                           	psect	strings
   379  0489                     __pstrings:	
   380  0489                     stringtab:	
   381  0489                     __stringtab:	
   382                           
   383                           ;	String table - string pointers are 1 byte each
   384  0489  1BFF               	btfsc	btemp+1,7
   385  048A  2C93               	ljmp	stringcode
   386  048B  1383               	bcf	3,7
   387  048C  187F               	btfsc	btemp+1,0
   388  048D  1783               	bsf	3,7
   389  048E  0800               	movf	0,w
   390  048F  0A84               	incf	4,f
   391  0490  1903               	skipnz
   392  0491  0AFF               	incf	btemp+1,f
   393  0492  0008               	return
   394  0493                     stringcode:	
   395  0493                     stringdir:	
   396  0493  3004               	movlw	high stringdir
   397  0494  008A               	movwf	10
   398  0495  0804               	movf	4,w
   399  0496  0A84               	incf	4,f
   400  0497  0782               	addwf	2,f
   401  0498                     __stringbase:	
   402  0498  3400               	retlw	0
   403  0499                     __end_of__stringtab:	
   404  0499                     _dpowers:	
   405  0499  3401               	retlw	1
   406  049A  3400               	retlw	0
   407  049B  340A               	retlw	10
   408  049C  3400               	retlw	0
   409  049D  3464               	retlw	100
   410  049E  3400               	retlw	0
   411  049F  34E8               	retlw	232
   412  04A0  3403               	retlw	3
   413  04A1  3410               	retlw	16
   414  04A2  3427               	retlw	39
   415  04A3                     __end_of_dpowers:	
   416  0013                     _SSPBUF	set	19
   417  0014                     _SSPCON	set	20
   418  000B                     _INTCONbits	set	11
   419  0018                     _RCSTAbits	set	24
   420  0008                     _PORTD	set	8
   421  0006                     _PORTB	set	6
   422  0005                     _PORTA	set	5
   423  001A                     _RCREG	set	26
   424  0019                     _TXREG	set	25
   425  000C                     _PIR1bits	set	12
   426  0041                     _RD1	set	65
   427  0040                     _RD0	set	64
   428  0065                     _RCIF	set	101
   429  0063                     _SSPIF	set	99
   430  0094                     _SSPSTATbits	set	148
   431  0094                     _SSPSTAT	set	148
   432  0085                     _TRISAbits	set	133
   433  008C                     _PIE1bits	set	140
   434  009A                     _SPBRGH	set	154
   435  0099                     _SPBRG	set	153
   436  0088                     _TRISD	set	136
   437  0087                     _TRISC	set	135
   438  0086                     _TRISB	set	134
   439  0085                     _TRISA	set	133
   440  0098                     _TXSTAbits	set	152
   441  0187                     _BAUDCTLbits	set	391
   442  0189                     _ANSELH	set	393
   443  0188                     _ANSEL	set	392
   444  04A3                     STR_1:	
   445  04A3  3420               	retlw	32	;' '
   446  04A4  3420               	retlw	32	;' '
   447  04A5  3420               	retlw	32	;' '
   448  04A6  3400               	retlw	0
   449  04A7                     STR_9:	
   450  04A7  3453               	retlw	83	;'S'
   451  04A8  344F               	retlw	79	;'O'
   452  04A9  344C               	retlw	76	;'L'
   453  04AA  3400               	retlw	0
   454  04AB                     STR_7:	
   455  04AB  3454               	retlw	84	;'T'
   456  04AC  3445               	retlw	69	;'E'
   457  04AD  344D               	retlw	77	;'M'
   458  04AE  3400               	retlw	0
   459  04AF                     STR_8:	
   460  04AF  3448               	retlw	72	;'H'
   461  04B0  3455               	retlw	85	;'U'
   462  04B1  344D               	retlw	77	;'M'
   463  04B2  3400               	retlw	0
   464  04B3                     STR_10:	
   465  04B3  3425               	retlw	37	;'%'
   466  04B4  3464               	retlw	100	;'d'
   467  04B5  3400               	retlw	0
   468  04B6                     STR_6:	
   469  04B6  3450               	retlw	80	;'P'
   470  04B7  3452               	retlw	82	;'R'
   471  04B8  3400               	retlw	0
   472  04A3                     
   473                           ; #config settings
   474  0000                     
   475                           	psect	cinit
   476  000F                     start_initialization:	
   477  000F                     __initialization:	
   478                           
   479                           ; Clear objects allocated to COMMON
   480  000F  01F5               	clrf	__pbssCOMMON& (0+127)
   481  0010  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   482  0011  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   483  0012  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   484                           
   485                           ; Clear objects allocated to BANK0
   486  0013  1383               	bcf	3,7	;select IRP bank0
   487  0014  3045               	movlw	low __pbssBANK0
   488  0015  0084               	movwf	4
   489  0016  3057               	movlw	low (__pbssBANK0+18)
   490  0017  120A  118A  253B  120A  118A  	fcall	clear_ram0
   491  001C                     end_of_initialization:	
   492                           ;End of C runtime variable initialization code
   493                           
   494  001C                     __end_of__initialization:	
   495  001C  0183               	clrf	3
   496  001D  120A  118A  2820   	ljmp	_main	;jump to C main() function
   497                           
   498                           	psect	bssCOMMON
   499  0075                     __pbssCOMMON:	
   500  0075                     _escoger:	
   501  0075                     	ds	2
   502  0077                     _z:	
   503  0077                     	ds	1
   504  0078                     _cursor:	
   505  0078                     	ds	1
   506                           
   507                           	psect	bssBANK0
   508  0045                     __pbssBANK0:	
   509  0045                     _hum:	
   510  0045                     	ds	2
   511  0047                     _luz:	
   512  0047                     	ds	2
   513  0049                     _prox:	
   514  0049                     	ds	2
   515  004B                     _caudal:	
   516  004B                     	ds	2
   517  004D                     _temp:	
   518  004D                     	ds	2
   519  004F                     _cont:	
   520  004F                     	ds	2
   521  0051                     _Pot2:	
   522  0051                     	ds	2
   523  0053                     _Pot1:	
   524  0053                     	ds	2
   525  0055                     _var1:	
   526  0055                     	ds	2
   527                           
   528                           	psect	clrtext
   529  053B                     clear_ram0:	
   530                           ;	Called with FSR containing the base address, and
   531                           ;	W with the last address+1
   532                           
   533  053B  0064               	clrwdt	;clear the watchdog before getting into this loop
   534  053C                     clrloop0:	
   535  053C  0180               	clrf	0	;clear RAM location pointed to by FSR
   536  053D  0A84               	incf	4,f	;increment pointer
   537  053E  0604               	xorwf	4,w	;XOR with final address
   538  053F  1903               	btfsc	3,2	;have we reached the end yet?
   539  0540  3400               	retlw	0	;all done for this memory range, return
   540  0541  0604               	xorwf	4,w	;XOR again to restore value
   541  0542  2D3C               	goto	clrloop0	;do the next byte
   542                           
   543                           	psect	cstackCOMMON
   544  0070                     __pcstackCOMMON:	
   545  0070                     ?_spiRead:	
   546  0070                     ??_spiRead:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ?_spiWrite:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ??_spiWrite:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_setup:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_writeIntLCD:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_initLCD:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_clcLCD:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ?_cmdLCD:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_writeCharLCD:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_isr:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_main:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_spiReceiveWait:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ??_spiReceiveWait:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     spiWrite@dat:	
   586                           ; 1 bytes @ 0x0
   587                           
   588                           
   589                           ; 1 bytes @ 0x0
   590  0070                     	ds	1
   591  0071                     ??_isr:	
   592                           
   593                           ; 1 bytes @ 0x1
   594  0071                     	ds	4
   595  0075                     ??_spiInit:	
   596  0075                     ??_clcLCD:	
   597                           ; 1 bytes @ 0x5
   598                           
   599                           
   600                           	psect	cstackBANK0
   601  0020                     __pcstackBANK0:	
   602                           ; 1 bytes @ 0x5
   603                           
   604  0020                     ?_spiInit:	
   605  0020                     ??_cmdLCD:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0020                     ??_writeCharLCD:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0020                     ?___lwdiv:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0020                     spiInit@sDataSample:	
   615                           ; 2 bytes @ 0x0
   616                           
   617  0020                     ___lwdiv@divisor:	
   618                           ; 1 bytes @ 0x0
   619                           
   620                           
   621                           ; 2 bytes @ 0x0
   622  0020                     	ds	1
   623  0021                     writeCharLCD@character:	
   624  0021                     spiInit@sClockIdle:	
   625                           ; 1 bytes @ 0x1
   626                           
   627                           
   628                           ; 1 bytes @ 0x1
   629  0021                     	ds	1
   630  0022                     ?_writeStrLCD:	
   631  0022                     cmdLCD@cmd:	
   632                           ; 1 bytes @ 0x2
   633                           
   634  0022                     spiInit@sTransmitEdge:	
   635                           ; 1 bytes @ 0x2
   636                           
   637  0022                     writeStrLCD@string:	
   638                           ; 1 bytes @ 0x2
   639                           
   640  0022                     ___lwdiv@dividend:	
   641                           ; 2 bytes @ 0x2
   642                           
   643                           
   644                           ; 2 bytes @ 0x2
   645  0022                     	ds	1
   646  0023                     ?_setCursorLCD:	
   647  0023                     ??_initLCD:	
   648                           ; 1 bytes @ 0x3
   649                           
   650  0023                     setCursorLCD@x:	
   651                           ; 1 bytes @ 0x3
   652                           
   653  0023                     spiInit@sType:	
   654                           ; 1 bytes @ 0x3
   655                           
   656                           
   657                           ; 1 bytes @ 0x3
   658  0023                     	ds	1
   659  0024                     ??_setCursorLCD:	
   660  0024                     ??_writeStrLCD:	
   661                           ; 1 bytes @ 0x4
   662                           
   663  0024                     ??___lwdiv:	
   664                           ; 1 bytes @ 0x4
   665                           
   666                           
   667                           ; 1 bytes @ 0x4
   668  0024                     	ds	1
   669  0025                     setCursorLCD@y:	
   670  0025                     ___lwdiv@counter:	
   671                           ; 1 bytes @ 0x5
   672                           
   673                           
   674                           ; 1 bytes @ 0x5
   675  0025                     	ds	1
   676  0026                     ___lwdiv@quotient:	
   677                           
   678                           ; 2 bytes @ 0x6
   679  0026                     	ds	1
   680  0027                     writeStrLCD@cont:	
   681                           
   682                           ; 2 bytes @ 0x7
   683  0027                     	ds	1
   684  0028                     ?___lwmod:	
   685  0028                     ___lwmod@divisor:	
   686                           ; 2 bytes @ 0x8
   687                           
   688                           
   689                           ; 2 bytes @ 0x8
   690  0028                     	ds	1
   691  0029                     ??_setup:	
   692                           
   693                           ; 1 bytes @ 0x9
   694  0029                     	ds	1
   695  002A                     ___lwmod@dividend:	
   696                           
   697                           ; 2 bytes @ 0xA
   698  002A                     	ds	2
   699  002C                     ??___lwmod:	
   700                           
   701                           ; 1 bytes @ 0xC
   702  002C                     	ds	1
   703  002D                     ___lwmod@counter:	
   704                           
   705                           ; 1 bytes @ 0xD
   706  002D                     	ds	1
   707  002E                     ?_sprintf:	
   708  002E                     sprintf@f:	
   709                           ; 2 bytes @ 0xE
   710                           
   711                           
   712                           ; 1 bytes @ 0xE
   713  002E                     	ds	3
   714  0031                     ??_sprintf:	
   715                           
   716                           ; 1 bytes @ 0x11
   717  0031                     	ds	3
   718  0034                     sprintf@ap:	
   719                           
   720                           ; 1 bytes @ 0x14
   721  0034                     	ds	1
   722  0035                     sprintf@flag:	
   723                           
   724                           ; 1 bytes @ 0x15
   725  0035                     	ds	1
   726  0036                     sprintf@prec:	
   727                           
   728                           ; 1 bytes @ 0x16
   729  0036                     	ds	1
   730  0037                     sprintf@val:	
   731                           
   732                           ; 2 bytes @ 0x17
   733  0037                     	ds	2
   734  0039                     sprintf@sp:	
   735                           
   736                           ; 1 bytes @ 0x19
   737  0039                     	ds	1
   738  003A                     sprintf@c:	
   739                           
   740                           ; 1 bytes @ 0x1A
   741  003A                     	ds	1
   742  003B                     ??_writeIntLCD:	
   743                           
   744                           ; 1 bytes @ 0x1B
   745  003B                     	ds	3
   746  003E                     writeIntLCD@buffer:	
   747                           
   748                           ; 4 bytes @ 0x1E
   749  003E                     	ds	4
   750  0042                     writeIntLCD@numero:	
   751                           
   752                           ; 1 bytes @ 0x22
   753  0042                     	ds	1
   754  0043                     ??_main:	
   755                           
   756                           ; 1 bytes @ 0x23
   757  0043                     	ds	2
   758                           
   759                           	psect	maintext
   760  0020                     __pmaintext:	
   761 ;;
   762 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   763 ;;
   764 ;; *************** function _main *****************
   765 ;; Defined at:
   766 ;;		line 76 in file "main_rasp.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;		None
   769 ;; Auto vars:     Size  Location     Type
   770 ;;		None
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : B00/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   780 ;;      Params:         0       0       0       0       0
   781 ;;      Locals:         0       0       0       0       0
   782 ;;      Temps:          0       2       0       0       0
   783 ;;      Totals:         0       2       0       0       0
   784 ;;Total ram usage:        2 bytes
   785 ;; Hardware stack levels required when called:    6
   786 ;; This function calls:
   787 ;;		_setCursorLCD
   788 ;;		_setup
   789 ;;		_writeIntLCD
   790 ;;		_writeStrLCD
   791 ;; This function is called by:
   792 ;;		Startup code after reset
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           
   797                           ;psect for function _main
   798  0020                     _main:	
   799  0020                     l1756:	
   800                           ;incstack = 0
   801                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   802                           
   803                           
   804                           ;main_rasp.c: 77:     setup();
   805  0020  120A  118A  2281  120A  118A  	fcall	_setup
   806  0025                     l1758:	
   807                           
   808                           ;main_rasp.c: 84:         setCursorLCD(2, 1);
   809  0025  1283               	bcf	3,5	;RP0=0, select bank0
   810  0026  1303               	bcf	3,6	;RP1=0, select bank0
   811  0027  01A3               	clrf	setCursorLCD@x
   812  0028  0AA3               	incf	setCursorLCD@x,f
   813  0029  3002               	movlw	2
   814  002A  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   815  002F                     l1760:	
   816                           
   817                           ;main_rasp.c: 85:         writeStrLCD("   ");
   818  002F  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   819  0030  1283               	bcf	3,5	;RP0=0, select bank0
   820  0031  1303               	bcf	3,6	;RP1=0, select bank0
   821  0032  00A2               	movwf	writeStrLCD@string
   822  0033  3080               	movlw	128
   823  0034  00A3               	movwf	writeStrLCD@string+1
   824  0035  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
   825                           
   826                           ;main_rasp.c: 86:         setCursorLCD(2, 1);
   827  003A  1283               	bcf	3,5	;RP0=0, select bank0
   828  003B  1303               	bcf	3,6	;RP1=0, select bank0
   829  003C  01A3               	clrf	setCursorLCD@x
   830  003D  0AA3               	incf	setCursorLCD@x,f
   831  003E  3002               	movlw	2
   832  003F  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   833  0044                     l1762:	
   834                           
   835                           ;main_rasp.c: 87:         writeIntLCD(caudal);
   836  0044  1283               	bcf	3,5	;RP0=0, select bank0
   837  0045  1303               	bcf	3,6	;RP1=0, select bank0
   838  0046  084B               	movf	_caudal,w
   839  0047  120A  118A  24B9  120A  118A  	fcall	_writeIntLCD
   840  004C                     l1764:	
   841                           
   842                           ;main_rasp.c: 88:         setCursorLCD(2, 9);
   843  004C  3009               	movlw	9
   844  004D  1283               	bcf	3,5	;RP0=0, select bank0
   845  004E  1303               	bcf	3,6	;RP1=0, select bank0
   846  004F  00C3               	movwf	??_main
   847  0050  0843               	movf	??_main,w
   848  0051  00A3               	movwf	setCursorLCD@x
   849  0052  3002               	movlw	2
   850  0053  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   851                           
   852                           ;main_rasp.c: 89:         writeStrLCD("   ");
   853  0058  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   854  0059  1283               	bcf	3,5	;RP0=0, select bank0
   855  005A  1303               	bcf	3,6	;RP1=0, select bank0
   856  005B  00A2               	movwf	writeStrLCD@string
   857  005C  3080               	movlw	128
   858  005D  00A3               	movwf	writeStrLCD@string+1
   859  005E  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
   860  0063                     l1766:	
   861                           
   862                           ;main_rasp.c: 90:         setCursorLCD(2, 9);
   863  0063  3009               	movlw	9
   864  0064  1283               	bcf	3,5	;RP0=0, select bank0
   865  0065  1303               	bcf	3,6	;RP1=0, select bank0
   866  0066  00C3               	movwf	??_main
   867  0067  0843               	movf	??_main,w
   868  0068  00A3               	movwf	setCursorLCD@x
   869  0069  3002               	movlw	2
   870  006A  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   871  006F                     l1768:	
   872                           
   873                           ;main_rasp.c: 91:         writeIntLCD(temp);
   874  006F  1283               	bcf	3,5	;RP0=0, select bank0
   875  0070  1303               	bcf	3,6	;RP1=0, select bank0
   876  0071  084D               	movf	_temp,w
   877  0072  120A  118A  24B9  120A  118A  	fcall	_writeIntLCD
   878                           
   879                           ;main_rasp.c: 93:         setCursorLCD(2, 14);
   880  0077  300E               	movlw	14
   881  0078  1283               	bcf	3,5	;RP0=0, select bank0
   882  0079  1303               	bcf	3,6	;RP1=0, select bank0
   883  007A  00C3               	movwf	??_main
   884  007B  0843               	movf	??_main,w
   885  007C  00A3               	movwf	setCursorLCD@x
   886  007D  3002               	movlw	2
   887  007E  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   888  0083                     l1770:	
   889                           
   890                           ;main_rasp.c: 94:         writeStrLCD("   ");
   891  0083  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   892  0084  1283               	bcf	3,5	;RP0=0, select bank0
   893  0085  1303               	bcf	3,6	;RP1=0, select bank0
   894  0086  00A2               	movwf	writeStrLCD@string
   895  0087  3080               	movlw	128
   896  0088  00A3               	movwf	writeStrLCD@string+1
   897  0089  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
   898  008E                     l1772:	
   899                           
   900                           ;main_rasp.c: 95:         setCursorLCD(2, 14);
   901  008E  300E               	movlw	14
   902  008F  1283               	bcf	3,5	;RP0=0, select bank0
   903  0090  1303               	bcf	3,6	;RP1=0, select bank0
   904  0091  00C3               	movwf	??_main
   905  0092  0843               	movf	??_main,w
   906  0093  00A3               	movwf	setCursorLCD@x
   907  0094  3002               	movlw	2
   908  0095  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   909                           
   910                           ;main_rasp.c: 96:         writeIntLCD(prox);
   911  009A  1283               	bcf	3,5	;RP0=0, select bank0
   912  009B  1303               	bcf	3,6	;RP1=0, select bank0
   913  009C  0849               	movf	_prox,w
   914  009D  120A  118A  24B9  120A  118A  	fcall	_writeIntLCD
   915  00A2                     l1774:	
   916                           
   917                           ;main_rasp.c: 97:         setCursorLCD(2, 4);
   918  00A2  3004               	movlw	4
   919  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   920  00A4  1303               	bcf	3,6	;RP1=0, select bank0
   921  00A5  00C3               	movwf	??_main
   922  00A6  0843               	movf	??_main,w
   923  00A7  00A3               	movwf	setCursorLCD@x
   924  00A8  3002               	movlw	2
   925  00A9  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   926  00AE                     l1776:	
   927                           
   928                           ;main_rasp.c: 98:         writeStrLCD("   ");
   929  00AE  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   930  00AF  1283               	bcf	3,5	;RP0=0, select bank0
   931  00B0  1303               	bcf	3,6	;RP1=0, select bank0
   932  00B1  00A2               	movwf	writeStrLCD@string
   933  00B2  3080               	movlw	128
   934  00B3  00A3               	movwf	writeStrLCD@string+1
   935  00B4  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
   936                           
   937                           ;main_rasp.c: 99:         setCursorLCD(2, 4);
   938  00B9  3004               	movlw	4
   939  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   940  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   941  00BC  00C3               	movwf	??_main
   942  00BD  0843               	movf	??_main,w
   943  00BE  00A3               	movwf	setCursorLCD@x
   944  00BF  3002               	movlw	2
   945  00C0  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   946  00C5                     l1778:	
   947                           
   948                           ;main_rasp.c: 100:         writeIntLCD(luz);
   949  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   950  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   951  00C7  0847               	movf	_luz,w
   952  00C8  120A  118A  24B9  120A  118A  	fcall	_writeIntLCD
   953  00CD                     l1780:	
   954                           
   955                           ;main_rasp.c: 101:         setCursorLCD(1, 4);
   956  00CD  3004               	movlw	4
   957  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   958  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   959  00D0  00C3               	movwf	??_main
   960  00D1  0843               	movf	??_main,w
   961  00D2  00A3               	movwf	setCursorLCD@x
   962  00D3  3001               	movlw	1
   963  00D4  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   964                           
   965                           ;main_rasp.c: 102:         writeStrLCD("   ");
   966  00D9  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   967  00DA  1283               	bcf	3,5	;RP0=0, select bank0
   968  00DB  1303               	bcf	3,6	;RP1=0, select bank0
   969  00DC  00A2               	movwf	writeStrLCD@string
   970  00DD  3080               	movlw	128
   971  00DE  00A3               	movwf	writeStrLCD@string+1
   972  00DF  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
   973  00E4                     l1782:	
   974                           
   975                           ;main_rasp.c: 103:         setCursorLCD(1, 4);
   976  00E4  3004               	movlw	4
   977  00E5  1283               	bcf	3,5	;RP0=0, select bank0
   978  00E6  1303               	bcf	3,6	;RP1=0, select bank0
   979  00E7  00C3               	movwf	??_main
   980  00E8  0843               	movf	??_main,w
   981  00E9  00A3               	movwf	setCursorLCD@x
   982  00EA  3001               	movlw	1
   983  00EB  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
   984  00F0                     l1784:	
   985                           
   986                           ;main_rasp.c: 104:         writeIntLCD(hum);
   987  00F0  1283               	bcf	3,5	;RP0=0, select bank0
   988  00F1  1303               	bcf	3,6	;RP1=0, select bank0
   989  00F2  0845               	movf	_hum,w
   990  00F3  120A  118A  24B9  120A  118A  	fcall	_writeIntLCD
   991  00F8                     l109:	
   992                           ;main_rasp.c: 107:         }
   993                           
   994                           
   995                           ;main_rasp.c: 106:         while (TXSTAbits.TRMT == 0) {
   996  00F8  1683               	bsf	3,5	;RP0=1, select bank1
   997  00F9  1303               	bcf	3,6	;RP1=0, select bank1
   998  00FA  1C98               	btfss	24,1	;volatile
   999  00FB  28FD               	goto	u1061
  1000  00FC  28FE               	goto	u1060
  1001  00FD                     u1061:	
  1002  00FD  28F8               	goto	l109
  1003  00FE                     u1060:	
  1004  00FE                     l1786:	
  1005                           
  1006                           ;main_rasp.c: 108:         TXREG = 1;
  1007  00FE  3001               	movlw	1
  1008  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0101  0099               	movwf	25	;volatile
  1011  0102                     l112:	
  1012                           ;main_rasp.c: 110:         }
  1013                           
  1014                           
  1015                           ;main_rasp.c: 109:         while (!RCIF) {
  1016  0102  1E8C               	btfss	12,5	;volatile
  1017  0103  2905               	goto	u1071
  1018  0104  2906               	goto	u1070
  1019  0105                     u1071:	
  1020  0105  2902               	goto	l112
  1021  0106                     u1070:	
  1022  0106                     l1788:	
  1023                           
  1024                           ;main_rasp.c: 111:         prox = RCREG;
  1025  0106  081A               	movf	26,w	;volatile
  1026  0107  00C3               	movwf	??_main
  1027  0108  01C4               	clrf	??_main+1
  1028  0109  0843               	movf	??_main,w
  1029  010A  00C9               	movwf	_prox
  1030  010B  0844               	movf	??_main+1,w
  1031  010C  00CA               	movwf	_prox+1
  1032                           
  1033                           ;main_rasp.c: 112:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1034  010D  3082               	movlw	130
  1035  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1036  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1037  0110  00C4               	movwf	??_main+1
  1038  0111  30DD               	movlw	221
  1039  0112  00C3               	movwf	??_main
  1040  0113                     u1177:	
  1041  0113  0BC3               	decfsz	??_main,f
  1042  0114  2913               	goto	u1177
  1043  0115  0BC4               	decfsz	??_main+1,f
  1044  0116  2913               	goto	u1177
  1045  0117                     l115:	
  1046                           ;main_rasp.c: 114:         }
  1047                           
  1048                           
  1049                           ;main_rasp.c: 113:         while (TXSTAbits.TRMT == 0) {
  1050  0117  1683               	bsf	3,5	;RP0=1, select bank1
  1051  0118  1303               	bcf	3,6	;RP1=0, select bank1
  1052  0119  1C98               	btfss	24,1	;volatile
  1053  011A  291C               	goto	u1081
  1054  011B  291D               	goto	u1080
  1055  011C                     u1081:	
  1056  011C  2917               	goto	l115
  1057  011D                     u1080:	
  1058  011D                     l1790:	
  1059                           
  1060                           ;main_rasp.c: 115:         TXREG = 2;
  1061  011D  3002               	movlw	2
  1062  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1063  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1064  0120  0099               	movwf	25	;volatile
  1065  0121                     l118:	
  1066                           ;main_rasp.c: 117:         }
  1067                           
  1068                           
  1069                           ;main_rasp.c: 116:         while (!RCIF) {
  1070  0121  1E8C               	btfss	12,5	;volatile
  1071  0122  2924               	goto	u1091
  1072  0123  2925               	goto	u1090
  1073  0124                     u1091:	
  1074  0124  2921               	goto	l118
  1075  0125                     u1090:	
  1076  0125                     l1792:	
  1077                           
  1078                           ;main_rasp.c: 118:         temp = RCREG;
  1079  0125  081A               	movf	26,w	;volatile
  1080  0126  00C3               	movwf	??_main
  1081  0127  01C4               	clrf	??_main+1
  1082  0128  0843               	movf	??_main,w
  1083  0129  00CD               	movwf	_temp
  1084  012A  0844               	movf	??_main+1,w
  1085  012B  00CE               	movwf	_temp+1
  1086                           
  1087                           ;main_rasp.c: 119:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1088  012C  3082               	movlw	130
  1089  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1090  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1091  012F  00C4               	movwf	??_main+1
  1092  0130  30DD               	movlw	221
  1093  0131  00C3               	movwf	??_main
  1094  0132                     u1187:	
  1095  0132  0BC3               	decfsz	??_main,f
  1096  0133  2932               	goto	u1187
  1097  0134  0BC4               	decfsz	??_main+1,f
  1098  0135  2932               	goto	u1187
  1099  0136                     l121:	
  1100                           ;main_rasp.c: 121:         }
  1101                           
  1102                           
  1103                           ;main_rasp.c: 120:         while (TXSTAbits.TRMT == 0) {
  1104  0136  1683               	bsf	3,5	;RP0=1, select bank1
  1105  0137  1303               	bcf	3,6	;RP1=0, select bank1
  1106  0138  1C98               	btfss	24,1	;volatile
  1107  0139  293B               	goto	u1101
  1108  013A  293C               	goto	u1100
  1109  013B                     u1101:	
  1110  013B  2936               	goto	l121
  1111  013C                     u1100:	
  1112  013C                     l1794:	
  1113                           
  1114                           ;main_rasp.c: 122:         TXREG = 3;
  1115  013C  3003               	movlw	3
  1116  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1117  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1118  013F  0099               	movwf	25	;volatile
  1119  0140                     l124:	
  1120                           ;main_rasp.c: 124:         }
  1121                           
  1122                           
  1123                           ;main_rasp.c: 123:         while (!RCIF) {
  1124  0140  1E8C               	btfss	12,5	;volatile
  1125  0141  2943               	goto	u1111
  1126  0142  2944               	goto	u1110
  1127  0143                     u1111:	
  1128  0143  2940               	goto	l124
  1129  0144                     u1110:	
  1130  0144                     l1796:	
  1131                           
  1132                           ;main_rasp.c: 125:         caudal = RCREG;
  1133  0144  081A               	movf	26,w	;volatile
  1134  0145  00C3               	movwf	??_main
  1135  0146  01C4               	clrf	??_main+1
  1136  0147  0843               	movf	??_main,w
  1137  0148  00CB               	movwf	_caudal
  1138  0149  0844               	movf	??_main+1,w
  1139  014A  00CC               	movwf	_caudal+1
  1140                           
  1141                           ;main_rasp.c: 126:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1142  014B  3082               	movlw	130
  1143  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1144  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1145  014E  00C4               	movwf	??_main+1
  1146  014F  30DD               	movlw	221
  1147  0150  00C3               	movwf	??_main
  1148  0151                     u1197:	
  1149  0151  0BC3               	decfsz	??_main,f
  1150  0152  2951               	goto	u1197
  1151  0153  0BC4               	decfsz	??_main+1,f
  1152  0154  2951               	goto	u1197
  1153  0155                     l127:	
  1154                           ;main_rasp.c: 128:         }
  1155                           
  1156                           
  1157                           ;main_rasp.c: 127:         while (TXSTAbits.TRMT == 0) {
  1158  0155  1683               	bsf	3,5	;RP0=1, select bank1
  1159  0156  1303               	bcf	3,6	;RP1=0, select bank1
  1160  0157  1C98               	btfss	24,1	;volatile
  1161  0158  295A               	goto	u1121
  1162  0159  295B               	goto	u1120
  1163  015A                     u1121:	
  1164  015A  2955               	goto	l127
  1165  015B                     u1120:	
  1166  015B                     l1798:	
  1167                           
  1168                           ;main_rasp.c: 129:         TXREG = 4;
  1169  015B  3004               	movlw	4
  1170  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1171  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1172  015E  0099               	movwf	25	;volatile
  1173  015F                     l130:	
  1174                           ;main_rasp.c: 131:         }
  1175                           
  1176                           
  1177                           ;main_rasp.c: 130:         while (!RCIF) {
  1178  015F  1E8C               	btfss	12,5	;volatile
  1179  0160  2962               	goto	u1131
  1180  0161  2963               	goto	u1130
  1181  0162                     u1131:	
  1182  0162  295F               	goto	l130
  1183  0163                     u1130:	
  1184  0163                     l1800:	
  1185                           
  1186                           ;main_rasp.c: 132:         luz = RCREG;
  1187  0163  081A               	movf	26,w	;volatile
  1188  0164  00C3               	movwf	??_main
  1189  0165  01C4               	clrf	??_main+1
  1190  0166  0843               	movf	??_main,w
  1191  0167  00C7               	movwf	_luz
  1192  0168  0844               	movf	??_main+1,w
  1193  0169  00C8               	movwf	_luz+1
  1194                           
  1195                           ;main_rasp.c: 133:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1196  016A  3082               	movlw	130
  1197  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1198  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1199  016D  00C4               	movwf	??_main+1
  1200  016E  30DD               	movlw	221
  1201  016F  00C3               	movwf	??_main
  1202  0170                     u1207:	
  1203  0170  0BC3               	decfsz	??_main,f
  1204  0171  2970               	goto	u1207
  1205  0172  0BC4               	decfsz	??_main+1,f
  1206  0173  2970               	goto	u1207
  1207  0174                     l133:	
  1208                           ;main_rasp.c: 135:         }
  1209                           
  1210                           
  1211                           ;main_rasp.c: 134:         while (TXSTAbits.TRMT == 0) {
  1212  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1213  0175  1303               	bcf	3,6	;RP1=0, select bank1
  1214  0176  1C98               	btfss	24,1	;volatile
  1215  0177  2979               	goto	u1141
  1216  0178  297A               	goto	u1140
  1217  0179                     u1141:	
  1218  0179  2974               	goto	l133
  1219  017A                     u1140:	
  1220  017A                     l1802:	
  1221                           
  1222                           ;main_rasp.c: 136:         TXREG = 5;
  1223  017A  3005               	movlw	5
  1224  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1225  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1226  017D  0099               	movwf	25	;volatile
  1227  017E                     l136:	
  1228                           ;main_rasp.c: 138:         }
  1229                           
  1230                           
  1231                           ;main_rasp.c: 137:         while (!RCIF) {
  1232  017E  1E8C               	btfss	12,5	;volatile
  1233  017F  2981               	goto	u1151
  1234  0180  2982               	goto	u1150
  1235  0181                     u1151:	
  1236  0181  297E               	goto	l136
  1237  0182                     u1150:	
  1238  0182                     l1804:	
  1239                           
  1240                           ;main_rasp.c: 139:         hum = RCREG;
  1241  0182  081A               	movf	26,w	;volatile
  1242  0183  00C3               	movwf	??_main
  1243  0184  01C4               	clrf	??_main+1
  1244  0185  0843               	movf	??_main,w
  1245  0186  00C5               	movwf	_hum
  1246  0187  0844               	movf	??_main+1,w
  1247  0188  00C6               	movwf	_hum+1
  1248                           
  1249                           ;main_rasp.c: 140:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1250  0189  3082               	movlw	130
  1251  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1252  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1253  018C  00C4               	movwf	??_main+1
  1254  018D  30DD               	movlw	221
  1255  018E  00C3               	movwf	??_main
  1256  018F                     u1217:	
  1257  018F  0BC3               	decfsz	??_main,f
  1258  0190  298F               	goto	u1217
  1259  0191  0BC4               	decfsz	??_main+1,f
  1260  0192  298F               	goto	u1217
  1261  0193  2825               	goto	l1758
  1262  0194  120A  118A  280C   	ljmp	start
  1263  0197                     __end_of_main:	
  1264                           
  1265                           	psect	text1
  1266  04B9                     __ptext1:	
  1267 ;; *************** function _writeIntLCD *****************
  1268 ;; Defined at:
  1269 ;;		line 66 in file "LCD.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;  numero          1    wreg     unsigned char 
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  numero          1   34[BANK0 ] unsigned char 
  1274 ;;  buffer          4   30[BANK0 ] unsigned char [4]
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1284 ;;      Params:         0       0       0       0       0
  1285 ;;      Locals:         0       5       0       0       0
  1286 ;;      Temps:          0       3       0       0       0
  1287 ;;      Totals:         0       8       0       0       0
  1288 ;;Total ram usage:        8 bytes
  1289 ;; Hardware stack levels used:    1
  1290 ;; Hardware stack levels required when called:    5
  1291 ;; This function calls:
  1292 ;;		_sprintf
  1293 ;;		_writeStrLCD
  1294 ;; This function is called by:
  1295 ;;		_main
  1296 ;;		_writeFloat
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _writeIntLCD
  1302  04B9                     _writeIntLCD:	
  1303                           
  1304                           ;incstack = 0
  1305                           ; Regs used in _writeIntLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1306                           ;writeIntLCD@numero stored from wreg
  1307  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  1308  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  1309  04BB  00C2               	movwf	writeIntLCD@numero
  1310  04BC                     l1754:	
  1311                           
  1312                           ;LCD.c: 67:     char buffer [4];;LCD.c: 68:     sprintf (buffer, "%d", numero);
  1313  04BC  301B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1314  04BD  00BB               	movwf	??_writeIntLCD
  1315  04BE  083B               	movf	??_writeIntLCD,w
  1316  04BF  00AE               	movwf	sprintf@f
  1317  04C0  0842               	movf	writeIntLCD@numero,w
  1318  04C1  00BC               	movwf	??_writeIntLCD+1
  1319  04C2  01BD               	clrf	??_writeIntLCD+2
  1320  04C3  083C               	movf	??_writeIntLCD+1,w
  1321  04C4  00AF               	movwf	?_sprintf+1
  1322  04C5  083D               	movf	??_writeIntLCD+2,w
  1323  04C6  00B0               	movwf	?_sprintf+2
  1324  04C7  303E               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1325  04C8  120A  118A  2197  120A  118A  	fcall	_sprintf
  1326                           
  1327                           ;LCD.c: 69:     writeStrLCD(buffer);
  1328  04CD  303E               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1329  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  1330  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  1331  04D0  00A2               	movwf	writeStrLCD@string
  1332  04D1  3000               	movlw	0
  1333  04D2  00A3               	movwf	writeStrLCD@string+1
  1334  04D3  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
  1335  04D8                     l186:	
  1336  04D8  0008               	return
  1337  04D9                     __end_of_writeIntLCD:	
  1338                           
  1339                           	psect	text2
  1340  0197                     __ptext2:	
  1341 ;; *************** function _sprintf *****************
  1342 ;; Defined at:
  1343 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  sp              1    wreg     PTR unsigned char 
  1346 ;;		 -> writeIntLCD@buffer(4), 
  1347 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  1348 ;;		 -> STR_10(3), 
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  sp              1   25[BANK0 ] PTR unsigned char 
  1351 ;;		 -> writeIntLCD@buffer(4), 
  1352 ;;  tmpval          4    0        struct .
  1353 ;;  val             2   23[BANK0 ] unsigned int 
  1354 ;;  cp              2    0        PTR const unsigned char 
  1355 ;;  len             2    0        unsigned int 
  1356 ;;  c               1   26[BANK0 ] unsigned char 
  1357 ;;  prec            1   22[BANK0 ] char 
  1358 ;;  flag            1   21[BANK0 ] unsigned char 
  1359 ;;  ap              1   20[BANK0 ] PTR void [1]
  1360 ;;		 -> ?_sprintf(2), 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;                  2   14[BANK0 ] int 
  1363 ;; Registers used:
  1364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1370 ;;      Params:         0       3       0       0       0
  1371 ;;      Locals:         0       7       0       0       0
  1372 ;;      Temps:          0       3       0       0       0
  1373 ;;      Totals:         0      13       0       0       0
  1374 ;;Total ram usage:       13 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:    4
  1377 ;; This function calls:
  1378 ;;		___lwdiv
  1379 ;;		___lwmod
  1380 ;; This function is called by:
  1381 ;;		_writeIntLCD
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _sprintf
  1387  0197                     _sprintf:	
  1388                           
  1389                           ;incstack = 0
  1390                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1391                           ;sprintf@sp stored from wreg
  1392  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1393  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1394  0199  00B9               	movwf	sprintf@sp
  1395  019A                     l1636:	
  1396                           
  1397                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 505: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources
      +                          \c90\common\doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\
      +                          common\doprnt.c: 507:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\source
      +                          s\c90\common\doprnt.c: 512:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c90\common\doprnt.c: 521:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .10\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
  1398  019A  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1399  019B  00B1               	movwf	??_sprintf
  1400  019C  0831               	movf	??_sprintf,w
  1401  019D  00B4               	movwf	sprintf@ap
  1402                           
  1403                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1404  019E  2A6A               	goto	l1688
  1405  019F                     l1638:	
  1406                           
  1407                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 555:   if(c
      +                           != '%')
  1408  019F  3025               	movlw	37
  1409  01A0  063A               	xorwf	sprintf@c,w
  1410  01A1  1903               	btfsc	3,2
  1411  01A2  29A4               	goto	u991
  1412  01A3  29A5               	goto	u990
  1413  01A4                     u991:	
  1414  01A4  29B1               	goto	l1644
  1415  01A5                     u990:	
  1416  01A5                     l1640:	
  1417                           
  1418                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 557:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 558:    ((*sp+
      +                          + = (c)));
  1419  01A5  083A               	movf	sprintf@c,w
  1420  01A6  00B1               	movwf	??_sprintf
  1421  01A7  0839               	movf	sprintf@sp,w
  1422  01A8  0084               	movwf	4
  1423  01A9  0831               	movf	??_sprintf,w
  1424  01AA  1383               	bcf	3,7	;select IRP bank0
  1425  01AB  0080               	movwf	0
  1426  01AC                     l1642:	
  1427  01AC  3001               	movlw	1
  1428  01AD  00B1               	movwf	??_sprintf
  1429  01AE  0831               	movf	??_sprintf,w
  1430  01AF  07B9               	addwf	sprintf@sp,f
  1431                           
  1432                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 559:    con
      +                          tinue;
  1433  01B0  2A6A               	goto	l1688
  1434  01B1                     l1644:	
  1435                           
  1436                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 565:   flag
      +                           = 0;
  1437  01B1  01B5               	clrf	sprintf@flag
  1438  01B2                     l1648:	
  1439                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 661:   swit
      +                          ch(c = *f++) {
  1440                           
  1441  01B2  3001               	movlw	1
  1442  01B3  07AE               	addwf	sprintf@f,f
  1443  01B4  30FF               	movlw	-1
  1444  01B5  072E               	addwf	sprintf@f,w
  1445  01B6  0084               	movwf	4
  1446  01B7  120A  118A  2493  120A  118A  	fcall	stringdir
  1447  01BC  00BA               	movwf	sprintf@c
  1448  01BD  00B1               	movwf	??_sprintf
  1449  01BE  01B2               	clrf	??_sprintf+1
  1450                           
  1451                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1452                           ; Switch size 1, requested type "simple"
  1453                           ; Number of cases is 1, Range of values is 0 to 0
  1454                           ; switch strategies available:
  1455                           ; Name         Instructions Cycles
  1456                           ; simple_byte            4     3 (average)
  1457                           ; direct_byte           11     8 (fixed)
  1458                           ; jumptable            260     6 (fixed)
  1459                           ;	Chosen strategy is simple_byte
  1460  01BF  0832               	movf	??_sprintf+1,w
  1461  01C0  3A00               	xorlw	0	; case 0
  1462  01C1  1903               	skipnz
  1463  01C2  29C4               	goto	l1846
  1464  01C3  2A6A               	goto	l1688
  1465  01C4                     l1846:	
  1466                           
  1467                           ; Switch size 1, requested type "simple"
  1468                           ; Number of cases is 3, Range of values is 0 to 105
  1469                           ; switch strategies available:
  1470                           ; Name         Instructions Cycles
  1471                           ; simple_byte           10     6 (average)
  1472                           ; jumptable            260     6 (fixed)
  1473                           ;	Chosen strategy is simple_byte
  1474  01C4  0831               	movf	??_sprintf,w
  1475  01C5  3A00               	xorlw	0	; case 0
  1476  01C6  1903               	skipnz
  1477  01C7  2A7C               	goto	l1690
  1478  01C8  3A64               	xorlw	100	; case 100
  1479  01C9  1903               	skipnz
  1480  01CA  29CF               	goto	l1650
  1481  01CB  3A0D               	xorlw	13	; case 105
  1482  01CC  1903               	skipnz
  1483  01CD  29CF               	goto	l1650
  1484  01CE  2A6A               	goto	l1688
  1485  01CF                     l1650:	
  1486                           
  1487                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1279:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1285:     val
      +                           = (unsigned int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1488  01CF  0834               	movf	sprintf@ap,w
  1489  01D0  0084               	movwf	4
  1490  01D1  1383               	bcf	3,7	;select IRP bank0
  1491  01D2  0800               	movf	0,w
  1492  01D3  00B7               	movwf	sprintf@val
  1493  01D4  0A84               	incf	4,f
  1494  01D5  0800               	movf	0,w
  1495  01D6  00B8               	movwf	sprintf@val+1
  1496  01D7                     l1652:	
  1497  01D7  3002               	movlw	2
  1498  01D8  00B1               	movwf	??_sprintf
  1499  01D9  0831               	movf	??_sprintf,w
  1500  01DA  07B4               	addwf	sprintf@ap,f
  1501  01DB                     l1654:	
  1502                           
  1503                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1287:    if
      +                          ((int)val < 0) {
  1504  01DB  1FB8               	btfss	sprintf@val+1,7
  1505  01DC  29DE               	goto	u1001
  1506  01DD  29DF               	goto	u1000
  1507  01DE                     u1001:	
  1508  01DE  29E8               	goto	l1660
  1509  01DF                     u1000:	
  1510  01DF                     l1656:	
  1511                           
  1512                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1288:     f
      +                          lag |= 0x03;
  1513  01DF  3003               	movlw	3
  1514  01E0  00B1               	movwf	??_sprintf
  1515  01E1  0831               	movf	??_sprintf,w
  1516  01E2  04B5               	iorwf	sprintf@flag,f
  1517  01E3                     l1658:	
  1518                           
  1519                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1289:     v
      +                          al = -val;
  1520  01E3  09B7               	comf	sprintf@val,f
  1521  01E4  09B8               	comf	sprintf@val+1,f
  1522  01E5  0AB7               	incf	sprintf@val,f
  1523  01E6  1903               	skipnz
  1524  01E7  0AB8               	incf	sprintf@val+1,f
  1525  01E8                     l1660:	
  1526                           
  1527                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1292:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1331:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1528  01E8  01BA               	clrf	sprintf@c
  1529  01E9  0ABA               	incf	sprintf@c,f
  1530  01EA                     l1666:	
  1531                           
  1532                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1332:     i
      +                          f(val < dpowers[c])
  1533  01EA  083A               	movf	sprintf@c,w
  1534  01EB  00B1               	movwf	??_sprintf
  1535  01EC  0731               	addwf	??_sprintf,w
  1536  01ED  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1537  01EE  0084               	movwf	4
  1538  01EF  120A  118A  2493  120A  118A  	fcall	stringdir
  1539  01F4  00B2               	movwf	??_sprintf+1
  1540  01F5  120A  118A  2493  120A  118A  	fcall	stringdir
  1541  01FA  00B3               	movwf	??_sprintf+2
  1542  01FB  0833               	movf	??_sprintf+2,w
  1543  01FC  0238               	subwf	sprintf@val+1,w
  1544  01FD  1D03               	skipz
  1545  01FE  2A01               	goto	u1015
  1546  01FF  0832               	movf	??_sprintf+1,w
  1547  0200  0237               	subwf	sprintf@val,w
  1548  0201                     u1015:	
  1549  0201  1803               	skipnc
  1550  0202  2A04               	goto	u1011
  1551  0203  2A05               	goto	u1010
  1552  0204                     u1011:	
  1553  0204  2A06               	goto	l1670
  1554  0205                     u1010:	
  1555  0205  2A10               	goto	l1672
  1556  0206                     l1670:	
  1557  0206  3001               	movlw	1
  1558  0207  00B1               	movwf	??_sprintf
  1559  0208  0831               	movf	??_sprintf,w
  1560  0209  07BA               	addwf	sprintf@c,f
  1561  020A  3005               	movlw	5
  1562  020B  063A               	xorwf	sprintf@c,w
  1563  020C  1D03               	btfss	3,2
  1564  020D  2A0F               	goto	u1021
  1565  020E  2A10               	goto	u1020
  1566  020F                     u1021:	
  1567  020F  29EA               	goto	l1666
  1568  0210                     u1020:	
  1569  0210                     l1672:	
  1570                           
  1571                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1448:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1464:    if(f
      +                          lag & 0x03)
  1572  0210  0835               	movf	sprintf@flag,w
  1573  0211  3903               	andlw	3
  1574  0212  1903               	btfsc	3,2
  1575  0213  2A15               	goto	u1031
  1576  0214  2A16               	goto	u1030
  1577  0215                     u1031:	
  1578  0215  2A21               	goto	l1678
  1579  0216                     u1030:	
  1580  0216                     l1674:	
  1581                           
  1582                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1465:     (
      +                          (*sp++ = ('-')));
  1583  0216  302D               	movlw	45
  1584  0217  00B1               	movwf	??_sprintf
  1585  0218  0839               	movf	sprintf@sp,w
  1586  0219  0084               	movwf	4
  1587  021A  0831               	movf	??_sprintf,w
  1588  021B  1383               	bcf	3,7	;select IRP bank0
  1589  021C  0080               	movwf	0
  1590  021D                     l1676:	
  1591  021D  3001               	movlw	1
  1592  021E  00B1               	movwf	??_sprintf
  1593  021F  0831               	movf	??_sprintf,w
  1594  0220  07B9               	addwf	sprintf@sp,f
  1595  0221                     l1678:	
  1596                           
  1597                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1495:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1498:   prec 
      +                          = c;
  1598  0221  083A               	movf	sprintf@c,w
  1599  0222  00B1               	movwf	??_sprintf
  1600  0223  0831               	movf	??_sprintf,w
  1601  0224  00B6               	movwf	sprintf@prec
  1602                           
  1603                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1604  0225  2A61               	goto	l1686
  1605  0226                     l1680:	
  1606                           
  1607                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1504:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1515:     c 
      +                          = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1608  0226  300A               	movlw	10
  1609  0227  00A8               	movwf	___lwmod@divisor
  1610  0228  3000               	movlw	0
  1611  0229  00A9               	movwf	___lwmod@divisor+1
  1612  022A  0836               	movf	sprintf@prec,w
  1613  022B  00B1               	movwf	??_sprintf
  1614  022C  0731               	addwf	??_sprintf,w
  1615  022D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1616  022E  0084               	movwf	4
  1617  022F  120A  118A  2493  120A  118A  	fcall	stringdir
  1618  0234  00A0               	movwf	___lwdiv@divisor
  1619  0235  120A  118A  2493  120A  118A  	fcall	stringdir
  1620  023A  00A1               	movwf	___lwdiv@divisor+1
  1621  023B  0838               	movf	sprintf@val+1,w
  1622  023C  00A3               	movwf	___lwdiv@dividend+1
  1623  023D  0837               	movf	sprintf@val,w
  1624  023E  00A2               	movwf	___lwdiv@dividend
  1625  023F  120A  118A  2386  120A  118A  	fcall	___lwdiv
  1626  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1627  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1628  0246  0821               	movf	?___lwdiv+1,w
  1629  0247  00AB               	movwf	___lwmod@dividend+1
  1630  0248  0820               	movf	?___lwdiv,w
  1631  0249  00AA               	movwf	___lwmod@dividend
  1632  024A  120A  118A  2412  120A  118A  	fcall	___lwmod
  1633  024F  1283               	bcf	3,5	;RP0=0, select bank0
  1634  0250  1303               	bcf	3,6	;RP1=0, select bank0
  1635  0251  0828               	movf	?___lwmod,w
  1636  0252  3E30               	addlw	48
  1637  0253  00B2               	movwf	??_sprintf+1
  1638  0254  0832               	movf	??_sprintf+1,w
  1639  0255  00BA               	movwf	sprintf@c
  1640  0256                     l1682:	
  1641                           
  1642                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1549:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1550:    ((*
      +                          sp++ = (c)));
  1643  0256  083A               	movf	sprintf@c,w
  1644  0257  00B1               	movwf	??_sprintf
  1645  0258  0839               	movf	sprintf@sp,w
  1646  0259  0084               	movwf	4
  1647  025A  0831               	movf	??_sprintf,w
  1648  025B  1383               	bcf	3,7	;select IRP bank0
  1649  025C  0080               	movwf	0
  1650  025D                     l1684:	
  1651  025D  3001               	movlw	1
  1652  025E  00B1               	movwf	??_sprintf
  1653  025F  0831               	movf	??_sprintf,w
  1654  0260  07B9               	addwf	sprintf@sp,f
  1655  0261                     l1686:	
  1656                           
  1657                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1658  0261  30FF               	movlw	255
  1659  0262  00B1               	movwf	??_sprintf
  1660  0263  0831               	movf	??_sprintf,w
  1661  0264  07B6               	addwf	sprintf@prec,f
  1662  0265  0A36               	incf	sprintf@prec,w
  1663  0266  1D03               	btfss	3,2
  1664  0267  2A69               	goto	u1041
  1665  0268  2A6A               	goto	u1040
  1666  0269                     u1041:	
  1667  0269  2A26               	goto	l1680
  1668  026A                     u1040:	
  1669  026A                     l1688:	
  1670                           
  1671                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1672  026A  3001               	movlw	1
  1673  026B  07AE               	addwf	sprintf@f,f
  1674  026C  30FF               	movlw	-1
  1675  026D  072E               	addwf	sprintf@f,w
  1676  026E  0084               	movwf	4
  1677  026F  120A  118A  2493  120A  118A  	fcall	stringdir
  1678  0274  00B1               	movwf	??_sprintf
  1679  0275  0831               	movf	??_sprintf,w
  1680  0276  00BA               	movwf	sprintf@c
  1681  0277  083A               	movf	sprintf@c,w
  1682  0278  1D03               	btfss	3,2
  1683  0279  2A7B               	goto	u1051
  1684  027A  2A7C               	goto	u1050
  1685  027B                     u1051:	
  1686  027B  299F               	goto	l1638
  1687  027C                     u1050:	
  1688  027C                     l1690:	
  1689                           
  1690                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1564:  *sp 
      +                          = 0;
  1691  027C  0839               	movf	sprintf@sp,w
  1692  027D  0084               	movwf	4
  1693  027E  1383               	bcf	3,7	;select IRP bank0
  1694  027F  0180               	clrf	0
  1695  0280                     l332:	
  1696  0280  0008               	return
  1697  0281                     __end_of_sprintf:	
  1698                           
  1699                           	psect	text3
  1700  0412                     __ptext3:	
  1701 ;; *************** function ___lwmod *****************
  1702 ;; Defined at:
  1703 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  divisor         2    8[BANK0 ] unsigned int 
  1706 ;;  dividend        2   10[BANK0 ] unsigned int 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  counter         1   13[BANK0 ] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  2    8[BANK0 ] unsigned int 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1718 ;;      Params:         0       4       0       0       0
  1719 ;;      Locals:         0       1       0       0       0
  1720 ;;      Temps:          0       1       0       0       0
  1721 ;;      Totals:         0       6       0       0       0
  1722 ;;Total ram usage:        6 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    3
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_sprintf
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           
  1733                           ;psect for function ___lwmod
  1734  0412                     ___lwmod:	
  1735  0412                     l1242:	
  1736                           ;incstack = 0
  1737                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1738                           
  1739  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1740  0413  1303               	bcf	3,6	;RP1=0, select bank0
  1741  0414  0828               	movf	___lwmod@divisor,w
  1742  0415  0429               	iorwf	___lwmod@divisor+1,w
  1743  0416  1903               	btfsc	3,2
  1744  0417  2C19               	goto	u511
  1745  0418  2C1A               	goto	u510
  1746  0419                     u511:	
  1747  0419  2C49               	goto	l1260
  1748  041A                     u510:	
  1749  041A                     l1244:	
  1750  041A  01AD               	clrf	___lwmod@counter
  1751  041B  0AAD               	incf	___lwmod@counter,f
  1752  041C  2C28               	goto	l1250
  1753  041D                     l1246:	
  1754  041D  3001               	movlw	1
  1755  041E                     u525:	
  1756  041E  1003               	clrc
  1757  041F  0DA8               	rlf	___lwmod@divisor,f
  1758  0420  0DA9               	rlf	___lwmod@divisor+1,f
  1759  0421  3EFF               	addlw	-1
  1760  0422  1D03               	skipz
  1761  0423  2C1E               	goto	u525
  1762  0424                     l1248:	
  1763  0424  3001               	movlw	1
  1764  0425  00AC               	movwf	??___lwmod
  1765  0426  082C               	movf	??___lwmod,w
  1766  0427  07AD               	addwf	___lwmod@counter,f
  1767  0428                     l1250:	
  1768  0428  1FA9               	btfss	___lwmod@divisor+1,7
  1769  0429  2C2B               	goto	u531
  1770  042A  2C2C               	goto	u530
  1771  042B                     u531:	
  1772  042B  2C1D               	goto	l1246
  1773  042C                     u530:	
  1774  042C                     l1252:	
  1775  042C  0829               	movf	___lwmod@divisor+1,w
  1776  042D  022B               	subwf	___lwmod@dividend+1,w
  1777  042E  1D03               	skipz
  1778  042F  2C32               	goto	u545
  1779  0430  0828               	movf	___lwmod@divisor,w
  1780  0431  022A               	subwf	___lwmod@dividend,w
  1781  0432                     u545:	
  1782  0432  1C03               	skipc
  1783  0433  2C35               	goto	u541
  1784  0434  2C36               	goto	u540
  1785  0435                     u541:	
  1786  0435  2C3C               	goto	l1256
  1787  0436                     u540:	
  1788  0436                     l1254:	
  1789  0436  0828               	movf	___lwmod@divisor,w
  1790  0437  02AA               	subwf	___lwmod@dividend,f
  1791  0438  0829               	movf	___lwmod@divisor+1,w
  1792  0439  1C03               	skipc
  1793  043A  03AB               	decf	___lwmod@dividend+1,f
  1794  043B  02AB               	subwf	___lwmod@dividend+1,f
  1795  043C                     l1256:	
  1796  043C  3001               	movlw	1
  1797  043D                     u555:	
  1798  043D  1003               	clrc
  1799  043E  0CA9               	rrf	___lwmod@divisor+1,f
  1800  043F  0CA8               	rrf	___lwmod@divisor,f
  1801  0440  3EFF               	addlw	-1
  1802  0441  1D03               	skipz
  1803  0442  2C3D               	goto	u555
  1804  0443                     l1258:	
  1805  0443  3001               	movlw	1
  1806  0444  02AD               	subwf	___lwmod@counter,f
  1807  0445  1D03               	btfss	3,2
  1808  0446  2C48               	goto	u561
  1809  0447  2C49               	goto	u560
  1810  0448                     u561:	
  1811  0448  2C2C               	goto	l1252
  1812  0449                     u560:	
  1813  0449                     l1260:	
  1814  0449  082B               	movf	___lwmod@dividend+1,w
  1815  044A  00A9               	movwf	?___lwmod+1
  1816  044B  082A               	movf	___lwmod@dividend,w
  1817  044C  00A8               	movwf	?___lwmod
  1818  044D                     l618:	
  1819  044D  0008               	return
  1820  044E                     __end_of___lwmod:	
  1821                           
  1822                           	psect	text4
  1823  0386                     __ptext4:	
  1824 ;; *************** function ___lwdiv *****************
  1825 ;; Defined at:
  1826 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  divisor         2    0[BANK0 ] unsigned int 
  1829 ;;  dividend        2    2[BANK0 ] unsigned int 
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;  quotient        2    6[BANK0 ] unsigned int 
  1832 ;;  counter         1    5[BANK0 ] unsigned char 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  2    0[BANK0 ] unsigned int 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1842 ;;      Params:         0       4       0       0       0
  1843 ;;      Locals:         0       3       0       0       0
  1844 ;;      Temps:          0       1       0       0       0
  1845 ;;      Totals:         0       8       0       0       0
  1846 ;;Total ram usage:        8 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    3
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_sprintf
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           
  1857                           ;psect for function ___lwdiv
  1858  0386                     ___lwdiv:	
  1859  0386                     l1568:	
  1860                           ;incstack = 0
  1861                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1862                           
  1863  0386  1283               	bcf	3,5	;RP0=0, select bank0
  1864  0387  1303               	bcf	3,6	;RP1=0, select bank0
  1865  0388  01A6               	clrf	___lwdiv@quotient
  1866  0389  01A7               	clrf	___lwdiv@quotient+1
  1867  038A                     l1570:	
  1868  038A  0820               	movf	___lwdiv@divisor,w
  1869  038B  0421               	iorwf	___lwdiv@divisor+1,w
  1870  038C  1903               	btfsc	3,2
  1871  038D  2B8F               	goto	u871
  1872  038E  2B90               	goto	u870
  1873  038F                     u871:	
  1874  038F  2BC7               	goto	l1590
  1875  0390                     u870:	
  1876  0390                     l1572:	
  1877  0390  01A5               	clrf	___lwdiv@counter
  1878  0391  0AA5               	incf	___lwdiv@counter,f
  1879  0392  2B9E               	goto	l1578
  1880  0393                     l1574:	
  1881  0393  3001               	movlw	1
  1882  0394                     u885:	
  1883  0394  1003               	clrc
  1884  0395  0DA0               	rlf	___lwdiv@divisor,f
  1885  0396  0DA1               	rlf	___lwdiv@divisor+1,f
  1886  0397  3EFF               	addlw	-1
  1887  0398  1D03               	skipz
  1888  0399  2B94               	goto	u885
  1889  039A                     l1576:	
  1890  039A  3001               	movlw	1
  1891  039B  00A4               	movwf	??___lwdiv
  1892  039C  0824               	movf	??___lwdiv,w
  1893  039D  07A5               	addwf	___lwdiv@counter,f
  1894  039E                     l1578:	
  1895  039E  1FA1               	btfss	___lwdiv@divisor+1,7
  1896  039F  2BA1               	goto	u891
  1897  03A0  2BA2               	goto	u890
  1898  03A1                     u891:	
  1899  03A1  2B93               	goto	l1574
  1900  03A2                     u890:	
  1901  03A2                     l1580:	
  1902  03A2  3001               	movlw	1
  1903  03A3                     u905:	
  1904  03A3  1003               	clrc
  1905  03A4  0DA6               	rlf	___lwdiv@quotient,f
  1906  03A5  0DA7               	rlf	___lwdiv@quotient+1,f
  1907  03A6  3EFF               	addlw	-1
  1908  03A7  1D03               	skipz
  1909  03A8  2BA3               	goto	u905
  1910  03A9  0821               	movf	___lwdiv@divisor+1,w
  1911  03AA  0223               	subwf	___lwdiv@dividend+1,w
  1912  03AB  1D03               	skipz
  1913  03AC  2BAF               	goto	u915
  1914  03AD  0820               	movf	___lwdiv@divisor,w
  1915  03AE  0222               	subwf	___lwdiv@dividend,w
  1916  03AF                     u915:	
  1917  03AF  1C03               	skipc
  1918  03B0  2BB2               	goto	u911
  1919  03B1  2BB3               	goto	u910
  1920  03B2                     u911:	
  1921  03B2  2BBA               	goto	l1586
  1922  03B3                     u910:	
  1923  03B3                     l1582:	
  1924  03B3  0820               	movf	___lwdiv@divisor,w
  1925  03B4  02A2               	subwf	___lwdiv@dividend,f
  1926  03B5  0821               	movf	___lwdiv@divisor+1,w
  1927  03B6  1C03               	skipc
  1928  03B7  03A3               	decf	___lwdiv@dividend+1,f
  1929  03B8  02A3               	subwf	___lwdiv@dividend+1,f
  1930  03B9                     l1584:	
  1931  03B9  1426               	bsf	___lwdiv@quotient,0
  1932  03BA                     l1586:	
  1933  03BA  3001               	movlw	1
  1934  03BB                     u925:	
  1935  03BB  1003               	clrc
  1936  03BC  0CA1               	rrf	___lwdiv@divisor+1,f
  1937  03BD  0CA0               	rrf	___lwdiv@divisor,f
  1938  03BE  3EFF               	addlw	-1
  1939  03BF  1D03               	skipz
  1940  03C0  2BBB               	goto	u925
  1941  03C1                     l1588:	
  1942  03C1  3001               	movlw	1
  1943  03C2  02A5               	subwf	___lwdiv@counter,f
  1944  03C3  1D03               	btfss	3,2
  1945  03C4  2BC6               	goto	u931
  1946  03C5  2BC7               	goto	u930
  1947  03C6                     u931:	
  1948  03C6  2BA2               	goto	l1580
  1949  03C7                     u930:	
  1950  03C7                     l1590:	
  1951  03C7  0827               	movf	___lwdiv@quotient+1,w
  1952  03C8  00A1               	movwf	?___lwdiv+1
  1953  03C9  0826               	movf	___lwdiv@quotient,w
  1954  03CA  00A0               	movwf	?___lwdiv
  1955  03CB                     l608:	
  1956  03CB  0008               	return
  1957  03CC                     __end_of___lwdiv:	
  1958                           
  1959                           	psect	text5
  1960  0281                     __ptext5:	
  1961 ;; *************** function _setup *****************
  1962 ;; Defined at:
  1963 ;;		line 147 in file "main_rasp.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1977 ;;      Params:         0       0       0       0       0
  1978 ;;      Locals:         0       0       0       0       0
  1979 ;;      Temps:          0       1       0       0       0
  1980 ;;      Totals:         0       1       0       0       0
  1981 ;;Total ram usage:        1 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    5
  1984 ;; This function calls:
  1985 ;;		_clcLCD
  1986 ;;		_initLCD
  1987 ;;		_setCursorLCD
  1988 ;;		_spiInit
  1989 ;;		_writeStrLCD
  1990 ;; This function is called by:
  1991 ;;		_main
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           
  1996                           ;psect for function _setup
  1997  0281                     _setup:	
  1998  0281                     l1698:	
  1999                           ;incstack = 0
  2000                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2001                           
  2002                           
  2003                           ;main_rasp.c: 148:     PORTA = 0;
  2004  0281  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0282  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0283  0185               	clrf	5	;volatile
  2007                           
  2008                           ;main_rasp.c: 149:     PORTB = 0;
  2009  0284  0186               	clrf	6	;volatile
  2010                           
  2011                           ;main_rasp.c: 150:     PORTD = 0;
  2012  0285  0188               	clrf	8	;volatile
  2013                           
  2014                           ;main_rasp.c: 151:     TRISA = 0;
  2015  0286  1683               	bsf	3,5	;RP0=1, select bank1
  2016  0287  1303               	bcf	3,6	;RP1=0, select bank1
  2017  0288  0185               	clrf	5	;volatile
  2018                           
  2019                           ;main_rasp.c: 152:     TRISB = 0;
  2020  0289  0186               	clrf	6	;volatile
  2021  028A                     l1700:	
  2022                           
  2023                           ;main_rasp.c: 153:     TRISC = 0b10011000;
  2024  028A  3098               	movlw	152
  2025  028B  0087               	movwf	7	;volatile
  2026  028C                     l1702:	
  2027                           
  2028                           ;main_rasp.c: 154:     TRISD = 0;
  2029  028C  0188               	clrf	8	;volatile
  2030  028D                     l1704:	
  2031                           
  2032                           ;main_rasp.c: 155:     ANSEL = 0;
  2033  028D  1683               	bsf	3,5	;RP0=1, select bank3
  2034  028E  1703               	bsf	3,6	;RP1=1, select bank3
  2035  028F  0188               	clrf	8	;volatile
  2036  0290                     l1706:	
  2037                           
  2038                           ;main_rasp.c: 156:     ANSELH = 0;
  2039  0290  0189               	clrf	9	;volatile
  2040  0291                     l1708:	
  2041                           
  2042                           ;main_rasp.c: 162:     TXSTAbits.SYNC = 0;
  2043  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2044  0292  1303               	bcf	3,6	;RP1=0, select bank1
  2045  0293  1218               	bcf	24,4	;volatile
  2046  0294                     l1710:	
  2047                           
  2048                           ;main_rasp.c: 163:     TXSTAbits.BRGH = 0;
  2049  0294  1118               	bcf	24,2	;volatile
  2050  0295                     l1712:	
  2051                           
  2052                           ;main_rasp.c: 164:     BAUDCTLbits.BRG16 = 1;
  2053  0295  1683               	bsf	3,5	;RP0=1, select bank3
  2054  0296  1703               	bsf	3,6	;RP1=1, select bank3
  2055  0297  1587               	bsf	7,3	;volatile
  2056                           
  2057                           ;main_rasp.c: 165:     SPBRG = 25;
  2058  0298  3019               	movlw	25
  2059  0299  1683               	bsf	3,5	;RP0=1, select bank1
  2060  029A  1303               	bcf	3,6	;RP1=0, select bank1
  2061  029B  0099               	movwf	25	;volatile
  2062  029C                     l1714:	
  2063                           
  2064                           ;main_rasp.c: 166:     SPBRGH = 0;
  2065  029C  019A               	clrf	26	;volatile
  2066  029D                     l1716:	
  2067                           
  2068                           ;main_rasp.c: 167:     RCSTAbits.SPEN = 1;
  2069  029D  1283               	bcf	3,5	;RP0=0, select bank0
  2070  029E  1303               	bcf	3,6	;RP1=0, select bank0
  2071  029F  1798               	bsf	24,7	;volatile
  2072  02A0                     l1718:	
  2073                           
  2074                           ;main_rasp.c: 168:     RCSTAbits.CREN = 1;
  2075  02A0  1618               	bsf	24,4	;volatile
  2076  02A1                     l1720:	
  2077                           
  2078                           ;main_rasp.c: 169:     TXSTAbits.TXEN = 1;
  2079  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  2080  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  2081  02A3  1698               	bsf	24,5	;volatile
  2082  02A4                     l1722:	
  2083                           
  2084                           ;main_rasp.c: 172:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_L
      +                          OW, SPI_IDLE_2_ACTIVE);
  2085  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2086  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  2087  02A6  01A0               	clrf	spiInit@sDataSample
  2088  02A7  01A1               	clrf	spiInit@sClockIdle
  2089  02A8  01A2               	clrf	spiInit@sTransmitEdge
  2090  02A9  3024               	movlw	36
  2091  02AA  120A  118A  24F3  120A  118A  	fcall	_spiInit
  2092  02AF                     l1724:	
  2093                           
  2094                           ;main_rasp.c: 174:     INTCONbits.GIE = 1;
  2095  02AF  178B               	bsf	11,7	;volatile
  2096  02B0                     l1726:	
  2097                           
  2098                           ;main_rasp.c: 175:     INTCONbits.PEIE = 1;
  2099  02B0  170B               	bsf	11,6	;volatile
  2100  02B1                     l1728:	
  2101                           
  2102                           ;main_rasp.c: 177:     PIR1bits.SSPIF = 0;
  2103  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  2104  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  2105  02B3  118C               	bcf	12,3	;volatile
  2106  02B4                     l1730:	
  2107                           
  2108                           ;main_rasp.c: 178:     PIE1bits.SSPIE = 1;
  2109  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  2110  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  2111  02B6  158C               	bsf	12,3	;volatile
  2112  02B7                     l1732:	
  2113                           
  2114                           ;main_rasp.c: 179:     TRISAbits.TRISA5 = 1;
  2115  02B7  1685               	bsf	5,5	;volatile
  2116  02B8                     l1734:	
  2117                           
  2118                           ;main_rasp.c: 183:     initLCD();
  2119  02B8  120A  118A  244E  120A  118A  	fcall	_initLCD
  2120  02BD                     l1736:	
  2121                           
  2122                           ;main_rasp.c: 184:     clcLCD();
  2123  02BD  120A  118A  2543  120A  118A  	fcall	_clcLCD
  2124  02C2                     l1738:	
  2125                           
  2126                           ;main_rasp.c: 187:     setCursorLCD(1, 1);
  2127  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2128  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2129  02C4  01A3               	clrf	setCursorLCD@x
  2130  02C5  0AA3               	incf	setCursorLCD@x,f
  2131  02C6  3001               	movlw	1
  2132  02C7  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
  2133  02CC                     l1740:	
  2134                           
  2135                           ;main_rasp.c: 188:     writeStrLCD("PR");
  2136  02CC  301E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2137  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2138  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2139  02CF  00A2               	movwf	writeStrLCD@string
  2140  02D0  3080               	movlw	128
  2141  02D1  00A3               	movwf	writeStrLCD@string+1
  2142  02D2  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
  2143  02D7                     l1742:	
  2144                           
  2145                           ;main_rasp.c: 189:     setCursorLCD(1, 4);
  2146  02D7  3004               	movlw	4
  2147  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2148  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  2149  02DA  00A9               	movwf	??_setup
  2150  02DB  0829               	movf	??_setup,w
  2151  02DC  00A3               	movwf	setCursorLCD@x
  2152  02DD  3001               	movlw	1
  2153  02DE  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
  2154  02E3                     l1744:	
  2155                           
  2156                           ;main_rasp.c: 190:     writeStrLCD("TEM");
  2157  02E3  3013               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2158  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2159  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2160  02E6  00A2               	movwf	writeStrLCD@string
  2161  02E7  3080               	movlw	128
  2162  02E8  00A3               	movwf	writeStrLCD@string+1
  2163  02E9  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
  2164  02EE                     l1746:	
  2165                           
  2166                           ;main_rasp.c: 191:     setCursorLCD(1, 9);
  2167  02EE  3009               	movlw	9
  2168  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2169  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  2170  02F1  00A9               	movwf	??_setup
  2171  02F2  0829               	movf	??_setup,w
  2172  02F3  00A3               	movwf	setCursorLCD@x
  2173  02F4  3001               	movlw	1
  2174  02F5  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
  2175  02FA                     l1748:	
  2176                           
  2177                           ;main_rasp.c: 192:     writeStrLCD("HUM");
  2178  02FA  3017               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2179  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2180  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  2181  02FD  00A2               	movwf	writeStrLCD@string
  2182  02FE  3080               	movlw	128
  2183  02FF  00A3               	movwf	writeStrLCD@string+1
  2184  0300  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
  2185  0305                     l1750:	
  2186                           
  2187                           ;main_rasp.c: 193:     setCursorLCD(1, 14);
  2188  0305  300E               	movlw	14
  2189  0306  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0307  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0308  00A9               	movwf	??_setup
  2192  0309  0829               	movf	??_setup,w
  2193  030A  00A3               	movwf	setCursorLCD@x
  2194  030B  3001               	movlw	1
  2195  030C  120A  118A  24D9  120A  118A  	fcall	_setCursorLCD
  2196  0311                     l1752:	
  2197                           
  2198                           ;main_rasp.c: 194:     writeStrLCD("SOL");
  2199  0311  300F               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2200  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0313  1303               	bcf	3,6	;RP1=0, select bank0
  2202  0314  00A2               	movwf	writeStrLCD@string
  2203  0315  3080               	movlw	128
  2204  0316  00A3               	movwf	writeStrLCD@string+1
  2205  0317  120A  118A  23CC  120A  118A  	fcall	_writeStrLCD
  2206  031C                     l144:	
  2207  031C  0008               	return
  2208  031D                     __end_of_setup:	
  2209                           
  2210                           	psect	text6
  2211  03CC                     __ptext6:	
  2212 ;; *************** function _writeStrLCD *****************
  2213 ;; Defined at:
  2214 ;;		line 30 in file "LCD.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;  string          2    2[BANK0 ] PTR unsigned char 
  2217 ;;		 -> writeIntLCD@buffer(4), STR_9(4), STR_8(4), STR_7(4), 
  2218 ;;		 -> STR_6(3), STR_5(4), STR_4(4), STR_3(4), 
  2219 ;;		 -> STR_2(4), STR_1(4), 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  cont            2    7[BANK0 ] int 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2231 ;;      Params:         0       2       0       0       0
  2232 ;;      Locals:         0       2       0       0       0
  2233 ;;      Temps:          0       3       0       0       0
  2234 ;;      Totals:         0       7       0       0       0
  2235 ;;Total ram usage:        7 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    4
  2238 ;; This function calls:
  2239 ;;		_writeCharLCD
  2240 ;; This function is called by:
  2241 ;;		_main
  2242 ;;		_setup
  2243 ;;		_writeIntLCD
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           
  2248                           ;psect for function _writeStrLCD
  2249  03CC                     _writeStrLCD:	
  2250  03CC                     l1602:	
  2251                           ;incstack = 0
  2252                           ; Regs used in _writeStrLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2253                           
  2254                           
  2255                           ;LCD.c: 31:  int cont;;LCD.c: 32:  for(cont=0;string[cont]!='\0';cont++){
  2256  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  2257  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  2258  03CE  01A7               	clrf	writeStrLCD@cont
  2259  03CF  01A8               	clrf	writeStrLCD@cont+1
  2260  03D0  2BF5               	goto	l1608
  2261  03D1                     l1604:	
  2262                           
  2263                           ;LCD.c: 33:         writeCharLCD(string[cont]);
  2264  03D1  0827               	movf	writeStrLCD@cont,w
  2265  03D2  0722               	addwf	writeStrLCD@string,w
  2266  03D3  00A5               	movwf	??_writeStrLCD+1
  2267  03D4  0823               	movf	writeStrLCD@string+1,w
  2268  03D5  00A4               	movwf	??_writeStrLCD
  2269  03D6  1803               	skipnc
  2270  03D7  0AA4               	incf	??_writeStrLCD,f
  2271  03D8  1FA7               	btfss	writeStrLCD@cont,7
  2272  03D9  2BDB               	goto	u950
  2273  03DA  03A4               	decf	??_writeStrLCD,f
  2274  03DB                     u950:	
  2275  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2276  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2277  03DD  0824               	movf	??_writeStrLCD,w
  2278  03DE  00A6               	movwf	??_writeStrLCD+2
  2279  03DF  0826               	movf	??_writeStrLCD+2,w
  2280  03E0  00FF               	movwf	btemp+1
  2281  03E1  0825               	movf	??_writeStrLCD+1,w
  2282  03E2  0084               	movwf	4
  2283  03E3  120A  118A  2489  120A  118A  	fcall	stringtab
  2284  03E8  120A  118A  2520  120A  118A  	fcall	_writeCharLCD
  2285  03ED                     l1606:	
  2286                           
  2287                           ;LCD.c: 34:     }
  2288  03ED  3001               	movlw	1
  2289  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  2290  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  2291  03F0  07A7               	addwf	writeStrLCD@cont,f
  2292  03F1  1803               	skipnc
  2293  03F2  0AA8               	incf	writeStrLCD@cont+1,f
  2294  03F3  3000               	movlw	0
  2295  03F4  07A8               	addwf	writeStrLCD@cont+1,f
  2296  03F5                     l1608:	
  2297  03F5  0827               	movf	writeStrLCD@cont,w
  2298  03F6  0722               	addwf	writeStrLCD@string,w
  2299  03F7  00A5               	movwf	??_writeStrLCD+1
  2300  03F8  0823               	movf	writeStrLCD@string+1,w
  2301  03F9  00A4               	movwf	??_writeStrLCD
  2302  03FA  1803               	skipnc
  2303  03FB  0AA4               	incf	??_writeStrLCD,f
  2304  03FC  1FA7               	btfss	writeStrLCD@cont,7
  2305  03FD  2BFF               	goto	u960
  2306  03FE  03A4               	decf	??_writeStrLCD,f
  2307  03FF                     u960:	
  2308  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2309  0400  1303               	bcf	3,6	;RP1=0, select bank0
  2310  0401  0824               	movf	??_writeStrLCD,w
  2311  0402  00A6               	movwf	??_writeStrLCD+2
  2312  0403  0826               	movf	??_writeStrLCD+2,w
  2313  0404  00FF               	movwf	btemp+1
  2314  0405  0825               	movf	??_writeStrLCD+1,w
  2315  0406  0084               	movwf	4
  2316  0407  120A  118A  2489  120A  118A  	fcall	stringtab
  2317  040C  3A00               	xorlw	0
  2318  040D  1D03               	skipz
  2319  040E  2C10               	goto	u971
  2320  040F  2C11               	goto	u970
  2321  0410                     u971:	
  2322  0410  2BD1               	goto	l1604
  2323  0411                     u970:	
  2324  0411                     l174:	
  2325  0411  0008               	return
  2326  0412                     __end_of_writeStrLCD:	
  2327                           
  2328                           	psect	text7
  2329  0520                     __ptext7:	
  2330 ;; *************** function _writeCharLCD *****************
  2331 ;; Defined at:
  2332 ;;		line 37 in file "LCD.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  character       1    wreg     unsigned char 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  character       1    1[BANK0 ] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2346 ;;      Params:         0       0       0       0       0
  2347 ;;      Locals:         0       1       0       0       0
  2348 ;;      Temps:          0       1       0       0       0
  2349 ;;      Totals:         0       2       0       0       0
  2350 ;;Total ram usage:        2 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    3
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_writeStrLCD
  2357 ;;		_writeFloat
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           
  2362                           ;psect for function _writeCharLCD
  2363  0520                     _writeCharLCD:	
  2364                           
  2365                           ;incstack = 0
  2366                           ; Regs used in _writeCharLCD: [wreg]
  2367                           ;writeCharLCD@character stored from wreg
  2368  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2369  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2370  0522  00A1               	movwf	writeCharLCD@character
  2371  0523                     l1560:	
  2372                           
  2373                           ;LCD.c: 38:    RD0 = 1;
  2374  0523  1408               	bsf	8,0	;volatile
  2375  0524                     l1562:	
  2376                           
  2377                           ;LCD.c: 39:    PORTB = character;
  2378  0524  0821               	movf	writeCharLCD@character,w
  2379  0525  0086               	movwf	6	;volatile
  2380  0526                     l1564:	
  2381                           
  2382                           ;LCD.c: 40:    RD1 = 1;
  2383  0526  1488               	bsf	8,1	;volatile
  2384                           
  2385                           ;LCD.c: 41:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2386  0527  300C               	movlw	12
  2387  0528  1283               	bcf	3,5	;RP0=0, select bank0
  2388  0529  1303               	bcf	3,6	;RP1=0, select bank0
  2389  052A  00A0               	movwf	??_writeCharLCD
  2390  052B                     u1227:	
  2391  052B  0BA0               	decfsz	??_writeCharLCD,f
  2392  052C  2D2B               	goto	u1227
  2393  052D  0000               	nop
  2394  052E                     l1566:	
  2395                           
  2396                           ;LCD.c: 42:    RD1 = 0;
  2397  052E  1283               	bcf	3,5	;RP0=0, select bank0
  2398  052F  1303               	bcf	3,6	;RP1=0, select bank0
  2399  0530  1088               	bcf	8,1	;volatile
  2400  0531                     l177:	
  2401  0531  0008               	return
  2402  0532                     __end_of_writeCharLCD:	
  2403                           
  2404                           	psect	text8
  2405  04F3                     __ptext8:	
  2406 ;; *************** function _spiInit *****************
  2407 ;; Defined at:
  2408 ;;		line 15 in file "SPI.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;  sType           1    wreg     enum E1293
  2411 ;;  sDataSample     1    0[BANK0 ] enum E1301
  2412 ;;  sClockIdle      1    1[BANK0 ] enum E1305
  2413 ;;  sTransmitEdg    1    2[BANK0 ] enum E1309
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  sType           1    3[BANK0 ] enum E1293
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      void 
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2425 ;;      Params:         0       3       0       0       0
  2426 ;;      Locals:         0       1       0       0       0
  2427 ;;      Temps:          0       0       0       0       0
  2428 ;;      Totals:         0       4       0       0       0
  2429 ;;Total ram usage:        4 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    3
  2432 ;; This function calls:
  2433 ;;		Nothing
  2434 ;; This function is called by:
  2435 ;;		_setup
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           
  2440                           ;psect for function _spiInit
  2441  04F3                     _spiInit:	
  2442                           
  2443                           ;incstack = 0
  2444                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2445                           ;spiInit@sType stored from wreg
  2446  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  2447  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  2448  04F5  00A3               	movwf	spiInit@sType
  2449  04F6                     l1610:	
  2450                           
  2451                           ;SPI.c: 15: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 16: {;SPI.c: 18:     if(sType & 0b00000
      +                          100)
  2452  04F6  1D23               	btfss	spiInit@sType,2
  2453  04F7  2CF9               	goto	u981
  2454  04F8  2CFA               	goto	u980
  2455  04F9                     u981:	
  2456  04F9  2CFF               	goto	l1614
  2457  04FA                     u980:	
  2458  04FA                     l1612:	
  2459                           
  2460                           ;SPI.c: 19:     {;SPI.c: 20:         SSPSTAT = sTransmitEdge;
  2461  04FA  0822               	movf	spiInit@sTransmitEdge,w
  2462  04FB  1683               	bsf	3,5	;RP0=1, select bank1
  2463  04FC  1303               	bcf	3,6	;RP1=0, select bank1
  2464  04FD  0094               	movwf	20	;volatile
  2465                           
  2466                           ;SPI.c: 22:     }
  2467  04FE  2D04               	goto	l204
  2468  04FF                     l1614:	
  2469                           
  2470                           ;SPI.c: 24:     {;SPI.c: 25:         SSPSTAT = sDataSample | sTransmitEdge;
  2471  04FF  0820               	movf	spiInit@sDataSample,w
  2472  0500  0422               	iorwf	spiInit@sTransmitEdge,w
  2473  0501  1683               	bsf	3,5	;RP0=1, select bank1
  2474  0502  1303               	bcf	3,6	;RP1=0, select bank1
  2475  0503  0094               	movwf	20	;volatile
  2476  0504                     l204:	
  2477                           ;SPI.c: 27:     }
  2478                           
  2479                           
  2480                           ;SPI.c: 29:     SSPCON = sType | sClockIdle;
  2481  0504  1283               	bcf	3,5	;RP0=0, select bank0
  2482  0505  1303               	bcf	3,6	;RP1=0, select bank0
  2483  0506  0823               	movf	spiInit@sType,w
  2484  0507  0421               	iorwf	spiInit@sClockIdle,w
  2485  0508  0094               	movwf	20	;volatile
  2486  0509                     l205:	
  2487  0509  0008               	return
  2488  050A                     __end_of_spiInit:	
  2489                           
  2490                           	psect	text9
  2491  04D9                     __ptext9:	
  2492 ;; *************** function _setCursorLCD *****************
  2493 ;; Defined at:
  2494 ;;		line 17 in file "LCD.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  y               1    wreg     unsigned char 
  2497 ;;  x               1    3[BANK0 ] unsigned char 
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  y               1    5[BANK0 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg, status,2, status,0, pclath, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2509 ;;      Params:         0       1       0       0       0
  2510 ;;      Locals:         0       1       0       0       0
  2511 ;;      Temps:          0       1       0       0       0
  2512 ;;      Totals:         0       3       0       0       0
  2513 ;;Total ram usage:        3 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    4
  2516 ;; This function calls:
  2517 ;;		_cmdLCD
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;;		_setup
  2521 ;;		_writeFloat
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           
  2526                           ;psect for function _setCursorLCD
  2527  04D9                     _setCursorLCD:	
  2528                           
  2529                           ;incstack = 0
  2530                           ; Regs used in _setCursorLCD: [wreg+status,2+status,0+pclath+cstack]
  2531                           ;setCursorLCD@y stored from wreg
  2532  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  2533  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  2534  04DB  00A5               	movwf	setCursorLCD@y
  2535  04DC                     l1594:	
  2536                           
  2537                           ;LCD.c: 18:     if(y == 1){
  2538  04DC  0325               	decf	setCursorLCD@y,w
  2539  04DD  1D03               	btfss	3,2
  2540  04DE  2CE0               	goto	u941
  2541  04DF  2CE1               	goto	u940
  2542  04E0                     u941:	
  2543  04E0  2CE7               	goto	l1598
  2544  04E1                     u940:	
  2545  04E1                     l1596:	
  2546                           
  2547                           ;LCD.c: 19:         cursor = 0x80 + x - 1;
  2548  04E1  0823               	movf	setCursorLCD@x,w
  2549  04E2  3E7F               	addlw	127
  2550  04E3  00A4               	movwf	??_setCursorLCD
  2551  04E4  0824               	movf	??_setCursorLCD,w
  2552  04E5  00F8               	movwf	_cursor
  2553                           
  2554                           ;LCD.c: 20:     }else{
  2555  04E6  2CEC               	goto	l1600
  2556  04E7                     l1598:	
  2557                           
  2558                           ;LCD.c: 21:         cursor = 0xC0 + x - 1;
  2559  04E7  0823               	movf	setCursorLCD@x,w
  2560  04E8  3EBF               	addlw	191
  2561  04E9  00A4               	movwf	??_setCursorLCD
  2562  04EA  0824               	movf	??_setCursorLCD,w
  2563  04EB  00F8               	movwf	_cursor
  2564  04EC                     l1600:	
  2565                           
  2566                           ;LCD.c: 23:     cmdLCD(cursor);
  2567  04EC  0878               	movf	_cursor,w
  2568  04ED  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2569  04F2                     l165:	
  2570  04F2  0008               	return
  2571  04F3                     __end_of_setCursorLCD:	
  2572                           
  2573                           	psect	text10
  2574  044E                     __ptext10:	
  2575 ;; *************** function _initLCD *****************
  2576 ;; Defined at:
  2577 ;;		line 45 in file "LCD.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, status,2, status,0, pclath, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2591 ;;      Params:         0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0
  2593 ;;      Temps:          0       2       0       0       0
  2594 ;;      Totals:         0       2       0       0       0
  2595 ;;Total ram usage:        2 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    4
  2598 ;; This function calls:
  2599 ;;		_cmdLCD
  2600 ;; This function is called by:
  2601 ;;		_setup
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           
  2606                           ;psect for function _initLCD
  2607  044E                     _initLCD:	
  2608  044E                     l1616:	
  2609                           ;incstack = 0
  2610                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  2611                           
  2612                           
  2613                           ;LCD.c: 46:      _delay((unsigned long)((15)*(4000000/4000.0)));
  2614  044E  3014               	movlw	20
  2615  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2616  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2617  0451  00A4               	movwf	??_initLCD+1
  2618  0452  3079               	movlw	121
  2619  0453  00A3               	movwf	??_initLCD
  2620  0454                     u1237:	
  2621  0454  0BA3               	decfsz	??_initLCD,f
  2622  0455  2C54               	goto	u1237
  2623  0456  0BA4               	decfsz	??_initLCD+1,f
  2624  0457  2C54               	goto	u1237
  2625  0458                     l1618:	
  2626                           
  2627                           ;LCD.c: 47:     cmdLCD(0x030);
  2628  0458  3030               	movlw	48
  2629  0459  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2630  045E                     l1620:	
  2631                           
  2632                           ;LCD.c: 48:     cmdLCD(0x030);
  2633  045E  3030               	movlw	48
  2634  045F  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2635  0464                     l1622:	
  2636                           
  2637                           ;LCD.c: 49:     cmdLCD(0x030);
  2638  0464  3030               	movlw	48
  2639  0465  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2640  046A                     l1624:	
  2641                           
  2642                           ;LCD.c: 51:     cmdLCD(0x38);
  2643  046A  3038               	movlw	56
  2644  046B  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2645  0470                     l1626:	
  2646                           
  2647                           ;LCD.c: 52:     cmdLCD(0x10);
  2648  0470  3010               	movlw	16
  2649  0471  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2650  0476                     l1628:	
  2651                           
  2652                           ;LCD.c: 53:     cmdLCD(0x01);
  2653  0476  3001               	movlw	1
  2654  0477  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2655  047C                     l1630:	
  2656                           
  2657                           ;LCD.c: 54:     cmdLCD(0x06);
  2658  047C  3006               	movlw	6
  2659  047D  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2660  0482                     l1632:	
  2661                           
  2662                           ;LCD.c: 55:     cmdLCD(0x0E);
  2663  0482  300E               	movlw	14
  2664  0483  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2665  0488                     l180:	
  2666  0488  0008               	return
  2667  0489                     __end_of_initLCD:	
  2668                           
  2669                           	psect	text11
  2670  0543                     __ptext11:	
  2671 ;; *************** function _clcLCD *****************
  2672 ;; Defined at:
  2673 ;;		line 26 in file "LCD.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0, pclath, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2687 ;;      Params:         0       0       0       0       0
  2688 ;;      Locals:         0       0       0       0       0
  2689 ;;      Temps:          0       0       0       0       0
  2690 ;;      Totals:         0       0       0       0       0
  2691 ;;Total ram usage:        0 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    4
  2694 ;; This function calls:
  2695 ;;		_cmdLCD
  2696 ;; This function is called by:
  2697 ;;		_setup
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _clcLCD
  2703  0543                     _clcLCD:	
  2704  0543                     l1634:	
  2705                           ;incstack = 0
  2706                           ; Regs used in _clcLCD: [wreg+status,2+status,0+pclath+cstack]
  2707                           
  2708                           
  2709                           ;LCD.c: 27:     cmdLCD(0x01);
  2710  0543  3001               	movlw	1
  2711  0544  120A  118A  250A  120A  118A  	fcall	_cmdLCD
  2712  0549                     l168:	
  2713  0549  0008               	return
  2714  054A                     __end_of_clcLCD:	
  2715                           
  2716                           	psect	text12
  2717  050A                     __ptext12:	
  2718 ;; *************** function _cmdLCD *****************
  2719 ;; Defined at:
  2720 ;;		line 58 in file "LCD.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  cmd             1    wreg     unsigned char 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  cmd             1    2[BANK0 ] unsigned char 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2734 ;;      Params:         0       0       0       0       0
  2735 ;;      Locals:         0       1       0       0       0
  2736 ;;      Temps:          0       2       0       0       0
  2737 ;;      Totals:         0       3       0       0       0
  2738 ;;Total ram usage:        3 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    3
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_setCursorLCD
  2745 ;;		_clcLCD
  2746 ;;		_initLCD
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           
  2751                           ;psect for function _cmdLCD
  2752  050A                     _cmdLCD:	
  2753                           
  2754                           ;incstack = 0
  2755                           ; Regs used in _cmdLCD: [wreg]
  2756                           ;cmdLCD@cmd stored from wreg
  2757  050A  1283               	bcf	3,5	;RP0=0, select bank0
  2758  050B  1303               	bcf	3,6	;RP1=0, select bank0
  2759  050C  00A2               	movwf	cmdLCD@cmd
  2760  050D                     l1552:	
  2761                           
  2762                           ;LCD.c: 59:     RD0 = 0;
  2763  050D  1008               	bcf	8,0	;volatile
  2764  050E                     l1554:	
  2765                           
  2766                           ;LCD.c: 60:  PORTB = cmd;
  2767  050E  0822               	movf	cmdLCD@cmd,w
  2768  050F  0086               	movwf	6	;volatile
  2769  0510                     l1556:	
  2770                           
  2771                           ;LCD.c: 61:  RD1 = 1;
  2772  0510  1488               	bsf	8,1	;volatile
  2773                           
  2774                           ;LCD.c: 62:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2775  0511  3006               	movlw	6
  2776  0512  1283               	bcf	3,5	;RP0=0, select bank0
  2777  0513  1303               	bcf	3,6	;RP1=0, select bank0
  2778  0514  00A1               	movwf	??_cmdLCD+1
  2779  0515  302F               	movlw	47
  2780  0516  00A0               	movwf	??_cmdLCD
  2781  0517                     u1247:	
  2782  0517  0BA0               	decfsz	??_cmdLCD,f
  2783  0518  2D17               	goto	u1247
  2784  0519  0BA1               	decfsz	??_cmdLCD+1,f
  2785  051A  2D17               	goto	u1247
  2786  051B  2D1C               	nop2
  2787  051C                     l1558:	
  2788                           
  2789                           ;LCD.c: 63:     RD1 = 0;
  2790  051C  1283               	bcf	3,5	;RP0=0, select bank0
  2791  051D  1303               	bcf	3,6	;RP1=0, select bank0
  2792  051E  1088               	bcf	8,1	;volatile
  2793  051F                     l183:	
  2794  051F  0008               	return
  2795  0520                     __end_of_cmdLCD:	
  2796                           
  2797                           	psect	text13
  2798  031D                     __ptext13:	
  2799 ;; *************** function _isr *****************
  2800 ;; Defined at:
  2801 ;;		line 48 in file "main_rasp.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;		None
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0, pclath, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2815 ;;      Params:         0       0       0       0       0
  2816 ;;      Locals:         0       0       0       0       0
  2817 ;;      Temps:          4       0       0       0       0
  2818 ;;      Totals:         4       0       0       0       0
  2819 ;;Total ram usage:        4 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    2
  2822 ;; This function calls:
  2823 ;;		_spiRead
  2824 ;;		_spiWrite
  2825 ;; This function is called by:
  2826 ;;		Interrupt level 1
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           
  2831                           ;psect for function _isr
  2832  031D                     _isr:	
  2833  031D                     i1l1436:	
  2834                           
  2835                           ;main_rasp.c: 49:    if(PIR1bits.SSPIF == 1){
  2836  031D  1283               	bcf	3,5	;RP0=0, select bank0
  2837  031E  1303               	bcf	3,6	;RP1=0, select bank0
  2838  031F  1D8C               	btfss	12,3	;volatile
  2839  0320  2B22               	goto	u70_21
  2840  0321  2B23               	goto	u70_20
  2841  0322                     u70_21:	
  2842  0322  2B7F               	goto	i1l103
  2843  0323                     u70_20:	
  2844  0323                     i1l1438:	
  2845                           
  2846                           ;main_rasp.c: 50:         escoger = spiRead();
  2847  0323  120A  118A  2532  120A  118A  	fcall	_spiRead
  2848  0328  00F1               	movwf	??_isr
  2849  0329  01F2               	clrf	??_isr+1
  2850  032A  0871               	movf	??_isr,w
  2851  032B  00F5               	movwf	_escoger
  2852  032C  0872               	movf	??_isr+1,w
  2853  032D  00F6               	movwf	_escoger+1
  2854  032E                     i1l1440:	
  2855                           
  2856                           ;main_rasp.c: 51:         if (escoger == 0 ){
  2857  032E  0875               	movf	_escoger,w
  2858  032F  0476               	iorwf	_escoger+1,w
  2859  0330  1D03               	btfss	3,2
  2860  0331  2B33               	goto	u71_21
  2861  0332  2B34               	goto	u71_20
  2862  0333                     u71_21:	
  2863  0333  2B3D               	goto	i1l1444
  2864  0334                     u71_20:	
  2865  0334                     i1l1442:	
  2866                           
  2867                           ;main_rasp.c: 52:             spiWrite(prox);
  2868  0334  1283               	bcf	3,5	;RP0=0, select bank0
  2869  0335  1303               	bcf	3,6	;RP1=0, select bank0
  2870  0336  0849               	movf	_prox,w
  2871  0337  120A  118A  2551  120A  118A  	fcall	_spiWrite
  2872                           
  2873                           ;main_rasp.c: 53:         }
  2874  033C  2B7C               	goto	i1l1460
  2875  033D                     i1l1444:	
  2876  033D  0375               	decf	_escoger,w
  2877  033E  0476               	iorwf	_escoger+1,w
  2878  033F  1D03               	btfss	3,2
  2879  0340  2B42               	goto	u72_21
  2880  0341  2B43               	goto	u72_20
  2881  0342                     u72_21:	
  2882  0342  2B4C               	goto	i1l1448
  2883  0343                     u72_20:	
  2884  0343                     i1l1446:	
  2885                           
  2886                           ;main_rasp.c: 55:             spiWrite(temp);
  2887  0343  1283               	bcf	3,5	;RP0=0, select bank0
  2888  0344  1303               	bcf	3,6	;RP1=0, select bank0
  2889  0345  084D               	movf	_temp,w
  2890  0346  120A  118A  2551  120A  118A  	fcall	_spiWrite
  2891                           
  2892                           ;main_rasp.c: 56:         }
  2893  034B  2B7C               	goto	i1l1460
  2894  034C                     i1l1448:	
  2895  034C  3002               	movlw	2
  2896  034D  0675               	xorwf	_escoger,w
  2897  034E  0476               	iorwf	_escoger+1,w
  2898  034F  1D03               	btfss	3,2
  2899  0350  2B52               	goto	u73_21
  2900  0351  2B53               	goto	u73_20
  2901  0352                     u73_21:	
  2902  0352  2B5C               	goto	i1l1452
  2903  0353                     u73_20:	
  2904  0353                     i1l1450:	
  2905                           
  2906                           ;main_rasp.c: 58:             spiWrite(caudal);
  2907  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2908  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2909  0355  084B               	movf	_caudal,w
  2910  0356  120A  118A  2551  120A  118A  	fcall	_spiWrite
  2911                           
  2912                           ;main_rasp.c: 59:         }
  2913  035B  2B7C               	goto	i1l1460
  2914  035C                     i1l1452:	
  2915  035C  3003               	movlw	3
  2916  035D  0675               	xorwf	_escoger,w
  2917  035E  0476               	iorwf	_escoger+1,w
  2918  035F  1D03               	btfss	3,2
  2919  0360  2B62               	goto	u74_21
  2920  0361  2B63               	goto	u74_20
  2921  0362                     u74_21:	
  2922  0362  2B6C               	goto	i1l1456
  2923  0363                     u74_20:	
  2924  0363                     i1l1454:	
  2925                           
  2926                           ;main_rasp.c: 61:             spiWrite(luz);
  2927  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2928  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2929  0365  0847               	movf	_luz,w
  2930  0366  120A  118A  2551  120A  118A  	fcall	_spiWrite
  2931                           
  2932                           ;main_rasp.c: 62:         }
  2933  036B  2B7C               	goto	i1l1460
  2934  036C                     i1l1456:	
  2935  036C  3004               	movlw	4
  2936  036D  0675               	xorwf	_escoger,w
  2937  036E  0476               	iorwf	_escoger+1,w
  2938  036F  1D03               	btfss	3,2
  2939  0370  2B72               	goto	u75_21
  2940  0371  2B73               	goto	u75_20
  2941  0372                     u75_21:	
  2942  0372  2B7C               	goto	i1l97
  2943  0373                     u75_20:	
  2944  0373                     i1l1458:	
  2945                           
  2946                           ;main_rasp.c: 64:             spiWrite(hum);
  2947  0373  1283               	bcf	3,5	;RP0=0, select bank0
  2948  0374  1303               	bcf	3,6	;RP1=0, select bank0
  2949  0375  0845               	movf	_hum,w
  2950  0376  120A  118A  2551  120A  118A  	fcall	_spiWrite
  2951  037B  2B7C               	goto	i1l1460
  2952  037C                     i1l97:	
  2953  037C                     i1l1460:	
  2954                           
  2955                           ;main_rasp.c: 66:         SSPIF = 0;
  2956  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2957  037D  1303               	bcf	3,6	;RP1=0, select bank0
  2958  037E  118C               	bcf	12,3	;volatile
  2959  037F                     i1l103:	
  2960  037F  0874               	movf	??_isr+3,w
  2961  0380  008A               	movwf	10
  2962  0381  0E73               	swapf	(??_isr+2)^(0+4294967168),w
  2963  0382  0083               	movwf	3
  2964  0383  0EFE               	swapf	btemp,f
  2965  0384  0E7E               	swapf	btemp,w
  2966  0385  0009               	retfie
  2967  0386                     __end_of_isr:	
  2968                           
  2969                           	psect	intentry
  2970  0004                     __pintentry:	
  2971                           ;incstack = 0
  2972                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2973                           
  2974  0004                     interrupt_function:	
  2975  007E                     saved_w	set	btemp
  2976  0004  00FE               	movwf	btemp
  2977  0005  0E03               	swapf	3,w
  2978  0006  00F3               	movwf	??_isr+2
  2979  0007  080A               	movf	10,w
  2980  0008  00F4               	movwf	??_isr+3
  2981  0009  120A  118A  2B1D   	ljmp	_isr
  2982                           
  2983                           	psect	text14
  2984  0551                     __ptext14:	
  2985 ;; *************** function _spiWrite *****************
  2986 ;; Defined at:
  2987 ;;		line 37 in file "SPI.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  dat             1    wreg     unsigned char 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  dat             1    0[COMMON] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3001 ;;      Params:         0       0       0       0       0
  3002 ;;      Locals:         1       0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0
  3004 ;;      Totals:         1       0       0       0       0
  3005 ;;Total ram usage:        1 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_isr
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           
  3015                           ;psect for function _spiWrite
  3016  0551                     _spiWrite:	
  3017                           
  3018                           ;incstack = 0
  3019                           ; Regs used in _spiWrite: [wreg]
  3020                           ;spiWrite@dat stored from wreg
  3021  0551  00F0               	movwf	spiWrite@dat
  3022  0552                     i1l1376:	
  3023                           
  3024                           ;SPI.c: 37: void spiWrite(char dat);SPI.c: 38: {;SPI.c: 39:     SSPBUF = dat;
  3025  0552  0870               	movf	spiWrite@dat,w
  3026  0553  1283               	bcf	3,5	;RP0=0, select bank0
  3027  0554  1303               	bcf	3,6	;RP1=0, select bank0
  3028  0555  0093               	movwf	19	;volatile
  3029  0556                     i1l214:	
  3030  0556  0008               	return
  3031  0557                     __end_of_spiWrite:	
  3032                           
  3033                           	psect	text15
  3034  0532                     __ptext15:	
  3035 ;; *************** function _spiRead *****************
  3036 ;; Defined at:
  3037 ;;		line 50 in file "SPI.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      unsigned char 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2, status,0, pclath, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3051 ;;      Params:         0       0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0
  3054 ;;      Totals:         0       0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    1
  3058 ;; This function calls:
  3059 ;;		_spiReceiveWait
  3060 ;; This function is called by:
  3061 ;;		_isr
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function _spiRead
  3067  0532                     _spiRead:	
  3068  0532                     i1l1370:	
  3069                           ;incstack = 0
  3070                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  3071                           
  3072                           
  3073                           ;SPI.c: 52:     spiReceiveWait();
  3074  0532  120A  118A  254A  120A  118A  	fcall	_spiReceiveWait
  3075  0537                     i1l1372:	
  3076                           
  3077                           ;SPI.c: 53:     return(SSPBUF);
  3078  0537  1283               	bcf	3,5	;RP0=0, select bank0
  3079  0538  1303               	bcf	3,6	;RP1=0, select bank0
  3080  0539  0813               	movf	19,w	;volatile
  3081  053A                     i1l222:	
  3082  053A  0008               	return
  3083  053B                     __end_of_spiRead:	
  3084                           
  3085                           	psect	text16
  3086  054A                     __ptext16:	
  3087 ;; *************** function _spiReceiveWait *****************
  3088 ;; Defined at:
  3089 ;;		line 32 in file "SPI.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;		None
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;		None
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		None
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3103 ;;      Params:         0       0       0       0       0
  3104 ;;      Locals:         0       0       0       0       0
  3105 ;;      Temps:          0       0       0       0       0
  3106 ;;      Totals:         0       0       0       0       0
  3107 ;;Total ram usage:        0 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_spiRead
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           
  3117                           ;psect for function _spiReceiveWait
  3118  054A                     _spiReceiveWait:	
  3119  054A                     i1l1368:	
  3120                           ;incstack = 0
  3121                           ; Regs used in _spiReceiveWait: []
  3122                           
  3123  054A                     i1l208:	
  3124                           ;SPI.c: 34:     while ( !SSPSTATbits.BF );
  3125                           
  3126  054A  1683               	bsf	3,5	;RP0=1, select bank1
  3127  054B  1303               	bcf	3,6	;RP1=0, select bank1
  3128  054C  1C14               	btfss	20,0	;volatile
  3129  054D  2D4F               	goto	u69_21
  3130  054E  2D50               	goto	u69_20
  3131  054F                     u69_21:	
  3132  054F  2D4A               	goto	i1l208
  3133  0550                     u69_20:	
  3134  0550                     i1l211:	
  3135  0550  0008               	return
  3136  0551                     __end_of_spiReceiveWait:	
  3137  007E                     btemp	set	126	;btemp
  3138  007E                     wtemp0	set	126


Data Sizes:
    Strings     22
    Constant    10
    Data        0
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     37      55
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    writeStrLCD@string	PTR unsigned char  size(2) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), STR_9(CODE[4]), STR_8(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _main->_writeIntLCD
    _writeIntLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_writeStrLCD
    _writeStrLCD->_writeCharLCD
    _setCursorLCD->_cmdLCD
    _initLCD->_cmdLCD
    _clcLCD->_cmdLCD

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8866
                                             35 BANK0      2     2      0
                       _setCursorLCD
                              _setup
                        _writeIntLCD
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeIntLCD                                          8     8      0    2738
                                             27 BANK0      8     8      0
                            _sprintf
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1554
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0    3323
                                              9 BANK0      1     1      0
                             _clcLCD
                            _initLCD
                       _setCursorLCD
                            _spiInit
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeStrLCD                                          7     5      2    1061
                                              2 BANK0      7     5      2
                       _writeCharLCD
 ---------------------------------------------------------------------------------
 (2) _writeCharLCD                                         2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _setCursorLCD                                         3     2      1    1744
                                              3 BANK0      3     2      1
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              2     2      0      31
                                              3 BANK0      2     2      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _clcLCD                                               0     0      0      31
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      22
                                              1 COMMON     4     4      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (5) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (6) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setCursorLCD
     _cmdLCD
   _setup
     _clcLCD
       _cmdLCD
     _initLCD
       _cmdLCD
     _setCursorLCD
       _cmdLCD
     _spiInit
     _writeStrLCD
       _writeCharLCD
   _writeIntLCD
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _writeStrLCD
       _writeCharLCD
   _writeStrLCD
     _writeCharLCD

 _isr (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      40       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      37       5       68.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      40      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon May 11 10:51:21 2020

                       _z 0077                         pc 0002               __CFG_CP$OFF 0000  
         writeStrLCD@cont 0027               _SSPSTATbits 0094                        fsr 0004  
                     l112 0102                       l121 0136                       l130 015F  
                     l115 0117                       l204 0504                       l124 0140  
                     l205 0509                       l133 0174                       l109 00F8  
                     l118 0121                       l127 0155                       l144 031C  
                     l136 017E                       l180 0488                       l332 0280  
                     l165 04F2                       l174 0411                       l183 051F  
                     l168 0549                       l177 0531                       l186 04D8  
                     l608 03CB                       l618 044D                       _RD0 0040  
                     _RD1 0041                       u510 041A                       u511 0419  
                     u530 042C              __CFG_CPD$OFF 0000                       u531 042B  
                     u540 0436                       u541 0435                       u525 041E  
                     u560 0449                       u561 0448                       u545 0432  
                     u555 043D                       u910 03B3                       u911 03B2  
                     u905 03A3                       u930 03C7                       u931 03C6  
                     u915 03AF                       u940 04E1                       u941 04E0  
                     u925 03BB                       u950 03DB                       u870 0390  
                     u871 038F                       u960 03FF                       u970 0411  
                     u890 03A2                       u971 0410                       u891 03A1  
                     u980 04FA                       u981 04F9                       u885 0394  
                     u990 01A5                       u991 01A4                       _hum 0045  
                     _isr 031D                       _luz 0047                       fsr0 0004  
                     indf 0000              __CFG_LVP$OFF 0000                      l1250 0428  
                    l1242 0412                      l1252 042C                      l1244 041A  
                    l1260 0449                      l1254 0436                      l1246 041D  
                    l1600 04EC                      l1256 043C                      l1248 0424  
                    l1610 04F6                      l1602 03CC                      l1258 0443  
                    l1620 045E                      l1612 04FA                      l1604 03D1  
                    l1700 028A                      l1630 047C                      l1622 0464  
                    l1614 04FF                      l1606 03ED                      l1710 0294  
                    l1702 028C                      l1552 050D                      l1632 0482  
                    l1624 046A                      l1616 044E                      l1560 0523  
                    l1608 03F5                      l1720 02A1                      l1712 0295  
                    l1704 028D                      l1640 01A5                      l1800 0163  
                    l1554 050E                      l1634 0543                      l1626 0470  
                    l1618 0458                      l1562 0524                      l1730 02B4  
                    l1722 02A4                      l1714 029C                      l1706 0290  
                    l1570 038A                      l1650 01CF                      l1642 01AC  
                    l1802 017A                      l1556 0510                      l1628 0476  
                    l1564 0526                      l1740 02CC                      l1732 02B7  
                    l1724 02AF                      l1716 029D                      l1708 0291  
                    l1580 03A2                      l1572 0390                      l1660 01E8  
                    l1652 01D7                      l1644 01B1                      l1636 019A  
                    l1804 0182                      l1558 051C                      l1566 052E  
                    l1750 0305                      l1742 02D7                      l1734 02B8  
                    l1726 02B0                      l1718 02A0                      l1582 03B3  
                    l1574 0393                      l1590 03C7                      l1670 0206  
                    l1654 01DB                      l1638 019F                      l1752 0311  
                    l1744 02E3                      l1736 02BD                      l1728 02B1  
                    l1584 03B9                      l1576 039A                      l1568 0386  
                    l1680 0226                      l1672 0210                      l1656 01DF  
                    l1648 01B2                      l1760 002F                      l1594 04DC  
                    l1746 02EE                      l1738 02C2                      l1586 03BA  
                    l1578 039E                      l1682 0256                      l1674 0216  
                    l1666 01EA                      l1658 01E3                      l1690 027C  
                    l1754 04BC                      l1770 0083                      l1762 0044  
                    l1596 04E1                      l1748 02FA                      l1588 03C1  
                    l1684 025D                      l1676 021D                      l1780 00CD  
                    l1772 008E                      l1764 004C                      l1756 0020  
                    l1598 04E7                      l1686 0261                      l1678 0221  
                    l1846 01C4                      l1790 011D                      l1782 00E4  
                    l1774 00A2                      l1766 0063                      l1758 0025  
                    l1688 026A                      l1792 0125                      l1784 00F0  
                    l1776 00AE                      l1768 006F                      l1698 0281  
                    l1794 013C                      l1786 00FE                      l1778 00C5  
                    l1796 0144                      l1788 0106                      l1798 015B  
                    ?_isr 0070                      STR_1 04A3                      STR_2 04A3  
                    STR_3 04A3                      STR_4 04A3                      STR_5 04A3  
                    STR_6 04B6                      STR_7 04AB                      STR_8 04AF  
                    STR_9 04A7                      u1000 01DF                      u1001 01DE  
                    u1010 0205                      u1011 0204                      u1020 0210  
                    u1100 013C                      u1021 020F                      u1101 013B  
                    u1030 0216                      u1110 0144                      u1031 0215  
                    u1015 0201                      u1111 0143                      u1040 026A  
                    u1120 015B                      u1041 0269                      u1121 015A  
                    u1050 027C                      u1130 0163                      u1051 027B  
                    u1131 0162                      u1140 017A                      u1060 00FE  
                    u1141 0179                      u1061 00FD                      u1150 0182  
                    u1070 0106                      u1151 0181                      u1207 0170  
                    u1071 0105                      u1080 011D                      u1217 018F  
                    u1081 011C                      u1090 0125                      u1227 052B  
                    u1091 0124                      u1237 0454                      u1247 0517  
                    u1177 0113                      u1187 0132                      u1197 0151  
                    _RCIF 0065                      i1l97 037C                      _Pot1 0053  
                    _Pot2 0051              __CFG_WRT$OFF 0000         writeStrLCD@string 0022  
                    _cont 004F                      _main 0020                      _var1 0055  
                    _temp 004D                      _prox 0049                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000                     ??_isr 0071  
             _writeIntLCD 04B9                     ?_main 0070                     STR_10 04B3  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188           __end_of___lwdiv 03CC  
                   i1l103 037F                     i1l211 0550                     i1l222 053A  
                   i1l214 0556                     i1l208 054A           __end_of___lwmod 044E  
                   _RCREG 001A               _writeStrLCD 03CC                     _SPBRG 0099  
                   _PORTA 0005                     _PORTB 0006                     _PORTD 0008  
                   u70_20 0323                     u70_21 0322                     u71_20 0334  
                   u71_21 0333                     u72_20 0343                     u72_21 0342  
                   u73_20 0353                     u73_21 0352                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   u74_20 0363                     _SSPIF 0063                     u74_21 0362  
                   u75_20 0373                     u75_21 0372                     u69_20 0550  
                   u69_21 054F                     _TXREG 0019            __CFG_FCMEN$OFF 0000  
         __end_of_initLCD 0489           __end_of_dpowers 04A3                     _setup 0281  
   __size_of_writeCharLCD 0012            __CFG_BOREN$OFF 0000                     pclath 000A  
         __end_of_spiInit 050A           __end_of_spiRead 053B                     status 0003  
                   wtemp0 007E           __end_of_sprintf 0281            __CFG_MCLRE$OFF 0000  
         __initialization 000F              __end_of_main 0197                    ??_main 0043  
            _writeCharLCD 0520                    ?_setup 0070                    _ANSELH 0189  
                  i1l1440 032E                    i1l1370 0532                    i1l1450 0353  
                  i1l1442 0334                    i1l1372 0537                    i1l1452 035C  
                  i1l1460 037C                    i1l1444 033D                    i1l1436 031D  
                  i1l1454 0363                    i1l1446 0343                    i1l1438 0323  
                  i1l1368 054A                    i1l1376 0552                    i1l1456 036C  
                  i1l1448 034C                    i1l1458 0373                    _SPBRGH 009A  
                  _SSPCON 0014                    _SSPBUF 0013            __CFG_PWRTE$OFF 0000  
       writeIntLCD@buffer 003E         writeIntLCD@numero 0042                    _clcLCD 0543  
                  _cmdLCD 050A                    _caudal 004B                 ??___lwdiv 0024  
               ??___lwmod 002C                    _cursor 0078                 ??_initLCD 0023  
                  saved_w 007E          __end_of_spiWrite 0557                 ??_spiInit 0075  
               ??_spiRead 0070                 ??_sprintf 0031   __end_of__initialization 001C  
          __pcstackCOMMON 0070             __end_of_setup 031D                   ??_setup 0029  
              __pbssBANK0 0045             ?_setCursorLCD 0023                __pmaintext 0020  
                 ?_clcLCD 0070                   ?_cmdLCD 0070                __pintentry 0004  
 __size_of_spiReceiveWait 0007              ?_writeIntLCD 0070              ?_writeStrLCD 0022  
                 _SSPSTAT 0094                __stringtab 0489            ??_setCursorLCD 0024  
               ?_spiWrite 0070             setCursorLCD@x 0023             setCursorLCD@y 0025  
         __size_of_clcLCD 0007           __size_of_cmdLCD 0016                   ___lwdiv 0386  
                 ___lwmod 0412                   __ptext1 04B9                   __ptext2 0197  
                 __ptext3 0412                   __ptext4 0386                   __ptext5 0281  
                 __ptext6 03CC                   __ptext7 0520                   __ptext8 04F3  
                 __ptext9 04D9                   _escoger 0075                   _initLCD 044E  
                 _dpowers 0499              __size_of_isr 0069                   _spiInit 04F3  
                 _spiRead 0532                   _sprintf 0197                   clrloop0 053C  
    end_of_initialization 001C                 _RCSTAbits 0018                ??_spiWrite 0070  
               _TRISAbits 0085               spiWrite@dat 0070                 _TXSTAbits 0098  
          _spiReceiveWait 054A            __end_of_clcLCD 054A            __end_of_cmdLCD 0520  
    __end_of_setCursorLCD 04F3               _BAUDCTLbits 0187      __size_of_writeIntLCD 0020  
     start_initialization 000F      __size_of_writeStrLCD 0046               __end_of_isr 0386  
__CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 0551                  ??_clcLCD 0075  
                ??_cmdLCD 0020               __pbssCOMMON 0075                 ___latbits 0002  
           __pcstackBANK0 0020     writeCharLCD@character 0021               sprintf@flag 0035  
             sprintf@prec 0036          ___lwdiv@dividend 0022                 cmdLCD@cmd 0022  
         ?_spiReceiveWait 0070                  ?___lwdiv 0020                  ?___lwmod 0028  
       __size_of_spiWrite 0006                 __pstrings 0489                  ?_initLCD 0070  
           ?_writeCharLCD 0070                  ?_spiInit 0020                  ?_spiRead 0070  
        ___lwdiv@quotient 0026                  ?_sprintf 002E            __size_of_setup 009C  
    spiInit@sTransmitEdge 0022         interrupt_function 0004                 clear_ram0 053B  
                _PIE1bits 008C        spiInit@sDataSample 0020                  _PIR1bits 000C  
   __size_of_setCursorLCD 001A               __stringbase 0498            ??_writeCharLCD 0020  
            _setCursorLCD 04D9          __size_of___lwdiv 0046          __size_of___lwmod 003C  
      __end_of__stringtab 0499                sprintf@val 0037          __size_of_initLCD 003B  
         ___lwdiv@divisor 0020           ___lwdiv@counter 0025                  __ptext10 044E  
                __ptext11 0543                  __ptext12 050A                  __ptext13 031D  
                __ptext14 0551                  __ptext15 0532                  __ptext16 054A  
        __size_of_spiInit 0017          __size_of_spiRead 0009         __CFG_BOR4V$BOR40V 0000  
        __size_of_sprintf 00EA             __size_of_main 0177                  _spiWrite 0551  
            spiInit@sType 0023         spiInit@sClockIdle 0021             ??_writeIntLCD 003B  
           ??_writeStrLCD 0024                _INTCONbits 000B                  intlevel1 0000  
               sprintf@ap 0034                 sprintf@sp 0039          ___lwmod@dividend 002A  
        ??_spiReceiveWait 0070      __end_of_writeCharLCD 0532                 stringcode 0493  
                sprintf@c 003A                  sprintf@f 002E           ___lwmod@divisor 0028  
         ___lwmod@counter 002D                  stringdir 0493                  stringtab 0489  
     __end_of_writeIntLCD 04D9       __end_of_writeStrLCD 0412  
